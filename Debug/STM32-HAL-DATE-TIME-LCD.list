
STM32-HAL-DATE-TIME-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b0  080052b0  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080052b0  080052b0  000152b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b8  080052b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          000002b8  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000320  20000320  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d9fb  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021d3  00000000  00000000  0002dad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e10  00000000  00000000  0002fcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000aef  00000000  00000000  00030ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000225bf  00000000  00000000  000315af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00010c07  00000000  00000000  00053b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd0d3  00000000  00000000  00064775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004368  00000000  00000000  00131848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00135bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005118 	.word	0x08005118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005118 	.word	0x08005118

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <keypad_create>:
 *
 * @return 	   Keypad_HandleTypeDef		- Keypad handler.
 */


Keypad_HandleTypeDef keypad_create(Keypad_PinDef pin_rows[], Keypad_PortDef port_rows[], Keypad_PinDef pin_columns[], Keypad_PortDef port_columns[]){
 800056c:	b4b0      	push	{r4, r5, r7}
 800056e:	b093      	sub	sp, #76	; 0x4c
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
 8000578:	603b      	str	r3, [r7, #0]
    Keypad_HandleTypeDef keypad;

    for (uint8_t i = 0; i < MATRIX_ARRAY; i++){
 800057a:	2300      	movs	r3, #0
 800057c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000580:	e03b      	b.n	80005fa <keypad_create+0x8e>
        keypad.pin_rows[i] = pin_rows[i];
 8000582:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	441a      	add	r2, r3
 800058c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000590:	8812      	ldrh	r2, [r2, #0]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	3348      	adds	r3, #72	; 0x48
 8000596:	443b      	add	r3, r7
 8000598:	f823 2c34 	strh.w	r2, [r3, #-52]
        keypad.port_rows[i] = port_rows[i];
 800059c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	441a      	add	r2, r3
 80005a6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005aa:	6812      	ldr	r2, [r2, #0]
 80005ac:	3302      	adds	r3, #2
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	3348      	adds	r3, #72	; 0x48
 80005b2:	443b      	add	r3, r7
 80005b4:	f843 2c34 	str.w	r2, [r3, #-52]

        keypad.pin_columns[i] = pin_columns[i];
 80005b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	441a      	add	r2, r3
 80005c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005c6:	8812      	ldrh	r2, [r2, #0]
 80005c8:	330c      	adds	r3, #12
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	3348      	adds	r3, #72	; 0x48
 80005ce:	443b      	add	r3, r7
 80005d0:	f823 2c34 	strh.w	r2, [r3, #-52]
        keypad.port_columns[i] = port_columns[i];
 80005d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80005dc:	441a      	add	r2, r3
 80005de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	3308      	adds	r3, #8
 80005e6:	009b      	lsls	r3, r3, #2
 80005e8:	3348      	adds	r3, #72	; 0x48
 80005ea:	443b      	add	r3, r7
 80005ec:	f843 2c34 	str.w	r2, [r3, #-52]
    for (uint8_t i = 0; i < MATRIX_ARRAY; i++){
 80005f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005f4:	3301      	adds	r3, #1
 80005f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80005fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d9bf      	bls.n	8000582 <keypad_create+0x16>
    }


    return keypad;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	461d      	mov	r5, r3
 8000606:	f107 0414 	add.w	r4, r7, #20
 800060a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800060c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800060e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000610:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000612:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000616:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800061a:	68f8      	ldr	r0, [r7, #12]
 800061c:	374c      	adds	r7, #76	; 0x4c
 800061e:	46bd      	mov	sp, r7
 8000620:	bcb0      	pop	{r4, r5, r7}
 8000622:	4770      	bx	lr

08000624 <key_selected>:
 *
 * @return 	   int32_t		- Returns 1 if a button is pressed and 0 if not.
 */


int32_t key_selected(Keypad_HandleTypeDef *keypad, uint8_t *key){
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]

	for (uint8_t row = 0; row < NUM_ROW; row++){
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]
 8000632:	e04f      	b.n	80006d4 <key_selected+0xb0>

		// Set output PINs (rows) to HIGH state.
		for (uint8_t i = 0; i < NUM_ROW; i++){
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
 8000638:	e00f      	b.n	800065a <key_selected+0x36>
			HAL_GPIO_WritePin(keypad->port_rows[i] , keypad->pin_rows[i], GPIO_PIN_SET);
 800063a:	7bba      	ldrb	r2, [r7, #14]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	3202      	adds	r2, #2
 8000640:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000644:	7bba      	ldrb	r2, [r7, #14]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	f001 fde2 	bl	8002218 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < NUM_ROW; i++){
 8000654:	7bbb      	ldrb	r3, [r7, #14]
 8000656:	3301      	adds	r3, #1
 8000658:	73bb      	strb	r3, [r7, #14]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d9ec      	bls.n	800063a <key_selected+0x16>
		}

		// Set Output pin to LOW.
		HAL_GPIO_WritePin(keypad->port_rows[row], keypad->pin_rows[row], GPIO_PIN_RESET);
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3202      	adds	r2, #2
 8000666:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	f001 fdcf 	bl	8002218 <HAL_GPIO_WritePin>

		GPIO_PinState Column_state;

		for (uint8_t col = 0; col < NUM_COL; col++){
 800067a:	2300      	movs	r3, #0
 800067c:	737b      	strb	r3, [r7, #13]
 800067e:	e023      	b.n	80006c8 <key_selected+0xa4>

			Column_state = HAL_GPIO_ReadPin(keypad->port_columns[col], keypad->pin_columns[col]);
 8000680:	7b7a      	ldrb	r2, [r7, #13]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	3208      	adds	r2, #8
 8000686:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800068a:	7b7a      	ldrb	r2, [r7, #13]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	320c      	adds	r2, #12
 8000690:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000694:	4619      	mov	r1, r3
 8000696:	f001 fda7 	bl	80021e8 <HAL_GPIO_ReadPin>
 800069a:	4603      	mov	r3, r0
 800069c:	733b      	strb	r3, [r7, #12]

			if (!Column_state){
 800069e:	7b3b      	ldrb	r3, [r7, #12]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10e      	bne.n	80006c2 <key_selected+0x9e>
				HAL_Delay(500);
 80006a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a8:	f001 facc 	bl	8001c44 <HAL_Delay>
				*key = Keys_matrix[row][col];
 80006ac:	7bfa      	ldrb	r2, [r7, #15]
 80006ae:	7b7b      	ldrb	r3, [r7, #13]
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <key_selected+0xc0>)
 80006b2:	0092      	lsls	r2, r2, #2
 80006b4:	440a      	add	r2, r1
 80006b6:	4413      	add	r3, r2
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	701a      	strb	r2, [r3, #0]
				return 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	e00c      	b.n	80006dc <key_selected+0xb8>
		for (uint8_t col = 0; col < NUM_COL; col++){
 80006c2:	7b7b      	ldrb	r3, [r7, #13]
 80006c4:	3301      	adds	r3, #1
 80006c6:	737b      	strb	r3, [r7, #13]
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d9d8      	bls.n	8000680 <key_selected+0x5c>
	for (uint8_t row = 0; row < NUM_ROW; row++){
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	3301      	adds	r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d9ac      	bls.n	8000634 <key_selected+0x10>
			}

		}

	}
	return 0;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	08005254 	.word	0x08005254

080006e8 <lcd_send_command>:
 *
 * @param[in]  cmd						- Command.
 */

void lcd_send_command(LCD_HandleTypeDef *lcd, uint8_t cmd)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	70fb      	strb	r3, [r7, #3]

	lcd_write(lcd, (cmd >> 4), RS_PIN_RESET);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	091b      	lsrs	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f83e 	bl	8000780 <lcd_write>
	lcd_write(lcd, (cmd & 0x0F), RS_PIN_RESET);
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f835 	bl	8000780 <lcd_write>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <lcd_print_char>:
 *
 * @param[in]  data						- Character to send.
 */

void lcd_print_char(LCD_HandleTypeDef *lcd, uint8_t data)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	460b      	mov	r3, r1
 8000728:	70fb      	strb	r3, [r7, #3]

	lcd_write(lcd, (data >> 4), RS_PIN_SET);  			//Higher nibble
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	091b      	lsrs	r3, r3, #4
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2201      	movs	r2, #1
 8000732:	4619      	mov	r1, r3
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f000 f823 	bl	8000780 <lcd_write>
	lcd_write(lcd, (data & 0x0F), RS_PIN_SET); 			//Lower nibble
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2201      	movs	r2, #1
 8000744:	4619      	mov	r1, r3
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 f81a 	bl	8000780 <lcd_write>

}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <lcd_print_string>:
 *
 * @param[in]  message					- String to send.
 */

void lcd_print_string(LCD_HandleTypeDef *lcd, char *message)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]

      do
      {
          lcd_print_char(lcd, (uint8_t)*message++);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	1c5a      	adds	r2, r3, #1
 8000762:	603a      	str	r2, [r7, #0]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	4619      	mov	r1, r3
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ffd8 	bl	800071e <lcd_print_char>
      }
      while (*message != '\0');
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1f3      	bne.n	800075e <lcd_print_string+0xa>

}
 8000776:	bf00      	nop
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <lcd_write>:
 * @param[in]  nibble					- 4-bits to send.
 *
 * @param[in]  Rs						- Rs pin.
 */

void lcd_write(LCD_HandleTypeDef *lcd, uint8_t nibble, uint8_t Rs){
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
 800078c:	4613      	mov	r3, r2
 800078e:	70bb      	strb	r3, [r7, #2]

	uint8_t Data = (nibble << LCD_IO_D4);
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	b2db      	uxtb	r3, r3
 8000796:	73fb      	strb	r3, [r7, #15]
	Data |= Rs << LCD_IO_RS;
 8000798:	7bfa      	ldrb	r2, [r7, #15]
 800079a:	78bb      	ldrb	r3, [r7, #2]
 800079c:	4313      	orrs	r3, r2
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	73fb      	strb	r3, [r7, #15]
	Data |= (1 << LCD_IO_BL); 						// Backlight always has to be at 1
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	73fb      	strb	r3, [r7, #15]
	Data |= (1 << LCD_IO_EN);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(lcd->I2C_Handle, lcd->I2C_Addr, &Data, 1, 100);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	b299      	uxth	r1, r3
 80007c0:	f107 020f 	add.w	r2, r7, #15
 80007c4:	2364      	movs	r3, #100	; 0x64
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2301      	movs	r3, #1
 80007ca:	f001 fe9b 	bl	8002504 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f001 fa38 	bl	8001c44 <HAL_Delay>
	Data &= ~(1 << LCD_IO_EN);
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f023 0304 	bic.w	r3, r3, #4
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(lcd->I2C_Handle, lcd->I2C_Addr, &Data, 1, 100);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	b299      	uxth	r1, r3
 80007e8:	f107 020f 	add.w	r2, r7, #15
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2301      	movs	r3, #1
 80007f2:	f001 fe87 	bl	8002504 <HAL_I2C_Master_Transmit>

}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <lcd_init_I2C>:
 * @param[in]  lcd						- LCD handler.
 *
 * @param[in]  I2C_Handle				- I2C handler.
 */

void lcd_init_I2C(LCD_HandleTypeDef *lcd, I2C_HandleTypeDef *I2C_Handle){
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	lcd->I2C_Addr = SLAVE_ADDRESS_PCF;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	224e      	movs	r2, #78	; 0x4e
 800080c:	605a      	str	r2, [r3, #4]
	lcd->I2C_Handle = I2C_Handle;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	601a      	str	r2, [r3, #0]

	lcd_init(lcd);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f804 	bl	8000822 <lcd_init>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <lcd_init>:
 *
 * @param[in]  lcd						- LCD handler.
 */

void lcd_init(LCD_HandleTypeDef *lcd)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af02      	add	r7, sp, #8
 8000828:	6078      	str	r0, [r7, #4]

	HAL_Delay(50);
 800082a:	2032      	movs	r0, #50	; 0x32
 800082c:	f001 fa0a 	bl	8001c44 <HAL_Delay>

	// Initialise data at 0
	uint8_t data = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(lcd->I2C_Handle, lcd->I2C_Addr, &data, 1, 100);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6818      	ldr	r0, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	b299      	uxth	r1, r3
 800083e:	f107 020f 	add.w	r2, r7, #15
 8000842:	2364      	movs	r3, #100	; 0x64
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2301      	movs	r3, #1
 8000848:	f001 fe5c 	bl	8002504 <HAL_I2C_Master_Transmit>

	HAL_Delay(40);
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f001 f9f9 	bl	8001c44 <HAL_Delay>

	// Send first nibble
	lcd_write(lcd, INIT_3, RS_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2103      	movs	r1, #3
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ff92 	bl	8000780 <lcd_write>

	HAL_Delay(5);
 800085c:	2005      	movs	r0, #5
 800085e:	f001 f9f1 	bl	8001c44 <HAL_Delay>

	// Send second nibble
	lcd_write(lcd, INIT_3, RS_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2103      	movs	r1, #3
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ff8a 	bl	8000780 <lcd_write>

	udelay(100);
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f000 f864 	bl	800093a <udelay>

	// Send third and fourth nibble
	lcd_write(lcd, INIT_3, RS_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2103      	movs	r1, #3
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff ff82 	bl	8000780 <lcd_write>
	lcd_write(lcd, INIT_2, RS_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2102      	movs	r1, #2
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff7d 	bl	8000780 <lcd_write>

	// Set 4-bits data length, display 2 lines and set 5x8 dots character font
	lcd_send_command(lcd, LCD_CMD_4DL_2L_5x8D);
 8000886:	2128      	movs	r1, #40	; 0x28
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff2d 	bl	80006e8 <lcd_send_command>

	// Set display on, cursor on and character box not blinking
	lcd_send_command(lcd, LCD_CMD_Don_C_nBL);
 800088e:	210e      	movs	r1, #14
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff ff29 	bl	80006e8 <lcd_send_command>

	lcd_display_clear(lcd);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f808 	bl	80008ac <lcd_display_clear>

	// Entry mode set. Cursor increment and no display shifted
	lcd_send_command(lcd, LCD_CMD_CI_nDS);
 800089c:	2106      	movs	r1, #6
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ff22 	bl	80006e8 <lcd_send_command>

}
 80008a4:	bf00      	nop
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <lcd_display_clear>:
 *
 * @param[in]  lcd						- LCD handler.
 */

void lcd_display_clear(LCD_HandleTypeDef *lcd)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

	lcd_send_command(lcd, LCD_CMD_CLEAR);
 80008b4:	2101      	movs	r1, #1
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f7ff ff16 	bl	80006e8 <lcd_send_command>

	HAL_Delay(2);
 80008bc:	2002      	movs	r0, #2
 80008be:	f001 f9c1 	bl	8001c44 <HAL_Delay>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <lcd_display_return_home>:
 * @param[in]  lcd						- LCD handler.
 */


void lcd_display_return_home(LCD_HandleTypeDef *lcd)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]

	lcd_send_command(lcd, LCD_CMD_HOME);
 80008d2:	2102      	movs	r1, #2
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff07 	bl	80006e8 <lcd_send_command>

	HAL_Delay(2);
 80008da:	2002      	movs	r0, #2
 80008dc:	f001 f9b2 	bl	8001c44 <HAL_Delay>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <lcd_set_cursor>:
 *
 * @param[in]  column					- Column Number (1 to 16).  Assuming a 2x16 characters display.
 */

void lcd_set_cursor(LCD_HandleTypeDef *lcd, uint8_t row, uint8_t column)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
 80008f4:	4613      	mov	r3, r2
 80008f6:	70bb      	strb	r3, [r7, #2]
  column--;
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	70bb      	strb	r3, [r7, #2]
  switch (row)
 80008fe:	78fb      	ldrb	r3, [r7, #3]
 8000900:	2b01      	cmp	r3, #1
 8000902:	d002      	beq.n	800090a <lcd_set_cursor+0x22>
 8000904:	2b02      	cmp	r3, #2
 8000906:	d00a      	beq.n	800091e <lcd_set_cursor+0x36>
    case 2:
      /* Set cursor to 2nd row address and add index*/
        lcd_send_command(lcd, (column |= 0xC0));
      break;
    default:
      break;
 8000908:	e013      	b.n	8000932 <lcd_set_cursor+0x4a>
      lcd_send_command(lcd, (column |= 0x80));
 800090a:	78bb      	ldrb	r3, [r7, #2]
 800090c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000910:	70bb      	strb	r3, [r7, #2]
 8000912:	78bb      	ldrb	r3, [r7, #2]
 8000914:	4619      	mov	r1, r3
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fee6 	bl	80006e8 <lcd_send_command>
      break;
 800091c:	e009      	b.n	8000932 <lcd_set_cursor+0x4a>
        lcd_send_command(lcd, (column |= 0xC0));
 800091e:	78bb      	ldrb	r3, [r7, #2]
 8000920:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000924:	70bb      	strb	r3, [r7, #2]
 8000926:	78bb      	ldrb	r3, [r7, #2]
 8000928:	4619      	mov	r1, r3
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff fedc 	bl	80006e8 <lcd_send_command>
      break;
 8000930:	bf00      	nop
  }
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <udelay>:
 *
 * @param[in]  cnt						- Count in microseconds.
 */

static void udelay(uint32_t cnt)
{
 800093a:	b480      	push	{r7}
 800093c:	b085      	sub	sp, #20
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0 ; i < (cnt * 1); i++);
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e002      	b.n	800094e <udelay+0x14>
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	429a      	cmp	r2, r3
 8000954:	d3f8      	bcc.n	8000948 <udelay+0xe>
}
 8000956:	bf00      	nop
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <rtc_init>:
 *
 * @returns	   uint8_t					- If the clock halt (CH) bit returns 1 the module is disable, if it returns 0 is enable.
 */

uint8_t rtc_init(RTC_HandleTypeDef *rtc, I2C_HandleTypeDef *I2C_Handle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]

	rtc->I2C_Addr = RTC_I2C_ADDRESS;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	22d0      	movs	r2, #208	; 0xd0
 8000972:	605a      	str	r2, [r3, #4]
	rtc->I2C_Handle = I2C_Handle;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	683a      	ldr	r2, [r7, #0]
 8000978:	601a      	str	r2, [r3, #0]

	//1. Make clock halt = 0;
	rtc_write(rtc, 0x00,RTC_ADDR_SEC);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f000 f919 	bl	8000bb6 <rtc_write>

	//2. Read back clock halt bit
	uint8_t clock_state = rtc_read(rtc, RTC_ADDR_SEC);
 8000984:	2100      	movs	r1, #0
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f931 	bl	8000bee <rtc_read>
 800098c:	4603      	mov	r3, r0
 800098e:	73fb      	strb	r3, [r7, #15]

	return ((clock_state >> 7 ) & 0x1);
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	09db      	lsrs	r3, r3, #7
 8000994:	b2db      	uxtb	r3, r3

}
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <rtc_set_current_time>:
 *
 * @param[in]  rtc_time					- Time handler.
 */

void rtc_set_current_time(RTC_HandleTypeDef *rtc, RTC_time_t *rtc_time)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b084      	sub	sp, #16
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
 80009a6:	6039      	str	r1, [r7, #0]

	uint8_t seconds, minutes, hours;
	seconds = binary_to_bcd(rtc_time->seconds);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f941 	bl	8000c34 <binary_to_bcd>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73bb      	strb	r3, [r7, #14]
	minutes = binary_to_bcd(rtc_time->minutes);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f93a 	bl	8000c34 <binary_to_bcd>
 80009c0:	4603      	mov	r3, r0
 80009c2:	737b      	strb	r3, [r7, #13]
	hours = binary_to_bcd(rtc_time->hours);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	789b      	ldrb	r3, [r3, #2]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 f933 	bl	8000c34 <binary_to_bcd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	73fb      	strb	r3, [r7, #15]

	seconds &= ~(1 << 7);
 80009d2:	7bbb      	ldrb	r3, [r7, #14]
 80009d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009d8:	73bb      	strb	r3, [r7, #14]

	rtc_write(rtc, seconds, RTC_ADDR_SEC);
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f000 f8e8 	bl	8000bb6 <rtc_write>

	rtc_write(rtc, minutes, RTC_ADDR_MIN);
 80009e6:	7b7b      	ldrb	r3, [r7, #13]
 80009e8:	2201      	movs	r2, #1
 80009ea:	4619      	mov	r1, r3
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f8e2 	bl	8000bb6 <rtc_write>

	if (rtc_time->time_format == TIME_FORMAT_24HRS){
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	78db      	ldrb	r3, [r3, #3]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d104      	bne.n	8000a04 <rtc_set_current_time+0x66>
		hours &= ~(1 << 6);
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a00:	73fb      	strb	r3, [r7, #15]
 8000a02:	e011      	b.n	8000a28 <rtc_set_current_time+0x8a>
	}else{
		hours |= (1 << 6);
 8000a04:	7bfb      	ldrb	r3, [r7, #15]
 8000a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0a:	73fb      	strb	r3, [r7, #15]
		hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? hours | (1 << 5) : hours & ~(1 << 5);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	78db      	ldrb	r3, [r3, #3]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d104      	bne.n	8000a1e <rtc_set_current_time+0x80>
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	f043 0320 	orr.w	r3, r3, #32
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	e003      	b.n	8000a26 <rtc_set_current_time+0x88>
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	f023 0320 	bic.w	r3, r3, #32
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	73fb      	strb	r3, [r7, #15]
	}

	rtc_write(rtc, hours, RTC_ADDR_HRS);
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f000 f8c1 	bl	8000bb6 <rtc_write>

}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <rtc_set_current_date>:
 *
 * @param[in]  rtc_date					- Date handler.
 */

void rtc_set_current_date(RTC_HandleTypeDef *rtc, RTC_date_t *rtc_date)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]

	rtc_write(rtc, binary_to_bcd(rtc_date->month),RTC_ADDR_MONTH);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f8f2 	bl	8000c34 <binary_to_bcd>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2205      	movs	r2, #5
 8000a54:	4619      	mov	r1, r3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f8ad 	bl	8000bb6 <rtc_write>

	rtc_write(rtc, binary_to_bcd(rtc_date->year),RTC_ADDR_YEAR);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	785b      	ldrb	r3, [r3, #1]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f8e7 	bl	8000c34 <binary_to_bcd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2206      	movs	r2, #6
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f000 f8a2 	bl	8000bb6 <rtc_write>

	rtc_write(rtc, binary_to_bcd(rtc_date->date),RTC_ADDR_DATE);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	789b      	ldrb	r3, [r3, #2]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f8dc 	bl	8000c34 <binary_to_bcd>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2204      	movs	r2, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f897 	bl	8000bb6 <rtc_write>

	rtc_write(rtc, binary_to_bcd(rtc_date->day), RTC_ADDR_DAY);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 f8d1 	bl	8000c34 <binary_to_bcd>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2203      	movs	r2, #3
 8000a96:	4619      	mov	r1, r3
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f88c 	bl	8000bb6 <rtc_write>

}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <rtc_get_current_time>:
 *
 * @param[in]  rtc_time					- Time handler.
 */

void rtc_get_current_time(RTC_HandleTypeDef *rtc, RTC_time_t *rtc_time)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]

	uint8_t seconds, minutes, hours;

	seconds = rtc_read(rtc, RTC_ADDR_SEC);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f89b 	bl	8000bee <rtc_read>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73bb      	strb	r3, [r7, #14]
	minutes = rtc_read(rtc, RTC_ADDR_MIN);
 8000abc:	2101      	movs	r1, #1
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 f895 	bl	8000bee <rtc_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	737b      	strb	r3, [r7, #13]
	hours = rtc_read(rtc, RTC_ADDR_HRS);
 8000ac8:	2102      	movs	r1, #2
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f88f 	bl	8000bee <rtc_read>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	73fb      	strb	r3, [r7, #15]

	seconds &= ~(1 << 7);
 8000ad4:	7bbb      	ldrb	r3, [r7, #14]
 8000ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ada:	73bb      	strb	r3, [r7, #14]

	rtc_time->seconds = bcd_to_binary(seconds);
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f8d4 	bl	8000c8c <bcd_to_binary>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	701a      	strb	r2, [r3, #0]
	rtc_time->minutes = bcd_to_binary(minutes);
 8000aec:	7b7b      	ldrb	r3, [r7, #13]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f8cc 	bl	8000c8c <bcd_to_binary>
 8000af4:	4603      	mov	r3, r0
 8000af6:	461a      	mov	r2, r3
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	705a      	strb	r2, [r3, #1]

	if(hours & (1 << 6)){										// 12 hours format
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00f      	beq.n	8000b26 <rtc_get_current_time+0x80>
		rtc_time->time_format = !( (hours & (1 << 5)) == 0 );
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	f003 0320 	and.w	r3, r3, #32
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	461a      	mov	r2, r3
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	70da      	strb	r2, [r3, #3]
		hours &= ~(0x3 << 5);
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e002      	b.n	8000b2c <rtc_get_current_time+0x86>
	}else {
		rtc_time->time_format = TIME_FORMAT_24HRS;
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2202      	movs	r2, #2
 8000b2a:	70da      	strb	r2, [r3, #3]
	}

	rtc_time->hours = bcd_to_binary(hours);
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f8ac 	bl	8000c8c <bcd_to_binary>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	709a      	strb	r2, [r3, #2]
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <rtc_get_current_date>:
 *
 * @param[in]  rtc_date					- Date handler.
 */

void rtc_get_current_date(RTC_HandleTypeDef *rtc, RTC_date_t *rtc_date)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
	rtc_date->date =  bcd_to_binary(rtc_read(rtc, RTC_ADDR_DATE));
 8000b4e:	2104      	movs	r1, #4
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f84c 	bl	8000bee <rtc_read>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f897 	bl	8000c8c <bcd_to_binary>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	461a      	mov	r2, r3
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	709a      	strb	r2, [r3, #2]
	rtc_date->month = bcd_to_binary(rtc_read(rtc, RTC_ADDR_MONTH));
 8000b66:	2105      	movs	r1, #5
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f000 f840 	bl	8000bee <rtc_read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f000 f88b 	bl	8000c8c <bcd_to_binary>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461a      	mov	r2, r3
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	701a      	strb	r2, [r3, #0]
	rtc_date->year = bcd_to_binary(rtc_read(rtc, RTC_ADDR_YEAR));
 8000b7e:	2106      	movs	r1, #6
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f834 	bl	8000bee <rtc_read>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f87f 	bl	8000c8c <bcd_to_binary>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	705a      	strb	r2, [r3, #1]
	rtc_date->day = bcd_to_binary(rtc_read(rtc, RTC_ADDR_DAY));
 8000b96:	2103      	movs	r1, #3
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f828 	bl	8000bee <rtc_read>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 f873 	bl	8000c8c <bcd_to_binary>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	70da      	strb	r2, [r3, #3]

}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <rtc_write>:
 *
 * @param[in]  reg_addr					- Address for the Time or Date handler values.
 */

static void rtc_write(RTC_HandleTypeDef *rtc, uint8_t value, uint8_t reg_addr)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af02      	add	r7, sp, #8
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	70fb      	strb	r3, [r7, #3]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	70bb      	strb	r3, [r7, #2]
	uint8_t tx[2];
	tx[0] = reg_addr;
 8000bc6:	78bb      	ldrb	r3, [r7, #2]
 8000bc8:	733b      	strb	r3, [r7, #12]
	tx[1] = value;
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(rtc->I2C_Handle, rtc->I2C_Addr, tx, 2, 100);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	b299      	uxth	r1, r3
 8000bd8:	f107 020c 	add.w	r2, r7, #12
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2302      	movs	r3, #2
 8000be2:	f001 fc8f 	bl	8002504 <HAL_I2C_Master_Transmit>
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <rtc_read>:
 *
 * @return     uint8_t					- Data returned after sending the corresponding address.
 */

static uint8_t rtc_read(RTC_HandleTypeDef *rtc, uint8_t reg_addr)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af02      	add	r7, sp, #8
 8000bf4:	6078      	str	r0, [r7, #4]
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	70fb      	strb	r3, [r7, #3]
	uint8_t data;
    HAL_I2C_Master_Transmit(rtc->I2C_Handle, rtc->I2C_Addr, &reg_addr, 1, 100);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	b299      	uxth	r1, r3
 8000c04:	1cfa      	adds	r2, r7, #3
 8000c06:	2364      	movs	r3, #100	; 0x64
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	f001 fc7a 	bl	8002504 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(rtc->I2C_Handle, rtc->I2C_Addr, &data, 1, 100);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6818      	ldr	r0, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	b299      	uxth	r1, r3
 8000c1a:	f107 020f 	add.w	r2, r7, #15
 8000c1e:	2364      	movs	r3, #100	; 0x64
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2301      	movs	r3, #1
 8000c24:	f001 fd6c 	bl	8002700 <HAL_I2C_Master_Receive>

    return data;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <binary_to_bcd>:
 *
 * @return     uint8_t					- Data returned in BCD format.
 */

static uint8_t binary_to_bcd(uint8_t value)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	uint8_t bcd;

	bcd = value;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	73fb      	strb	r3, [r7, #15]
	if(value >= 10)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	d918      	bls.n	8000c7a <binary_to_bcd+0x46>
	{
		m = value /10;
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	; (8000c88 <binary_to_bcd+0x54>)
 8000c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	73bb      	strb	r3, [r7, #14]
		n = value % 10;
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <binary_to_bcd+0x54>)
 8000c58:	fba3 1302 	umull	r1, r3, r3, r2
 8000c5c:	08d9      	lsrs	r1, r3, #3
 8000c5e:	460b      	mov	r3, r1
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	737b      	strb	r3, [r7, #13]
		bcd = (m << 4) | n ;
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	b25a      	sxtb	r2, r3
 8000c70:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	73fb      	strb	r3, [r7, #15]
	}

	return bcd;
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	cccccccd 	.word	0xcccccccd

08000c8c <bcd_to_binary>:
 *
 * @return     uint8_t					- Data returned in binary format.
 */

static uint8_t bcd_to_binary(uint8_t value)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
	uint8_t m , n;
	m = (uint8_t) ((value >> 4 ) * 10);
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	b2db      	uxtb	r3, r3
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
	n =  value & (uint8_t)0x0F;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 030f 	and.w	r3, r3, #15
 8000cac:	73bb      	strb	r3, [r7, #14]
	return (m+n);
 8000cae:	7bfa      	ldrb	r2, [r7, #15]
 8000cb0:	7bbb      	ldrb	r3, [r7, #14]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b2db      	uxtb	r3, r3
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
	...

08000cc4 <number_to_string>:
 * @param[in]  num						- Integer value.
 *
 * @param[in]  buf						- Character.
 */

void number_to_string(uint8_t num, char *buf){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
	if (num < 10){
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b09      	cmp	r3, #9
 8000cd4:	d809      	bhi.n	8000cea <number_to_string+0x26>
		buf[0] = '0';
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2230      	movs	r2, #48	; 0x30
 8000cda:	701a      	strb	r2, [r3, #0]
		buf[1] = num+48;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	79fa      	ldrb	r2, [r7, #7]
 8000ce2:	3230      	adds	r2, #48	; 0x30
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	701a      	strb	r2, [r3, #0]
	}else if (num >= 10 && num <99){
		buf[0] = (num / 10) + 48;
		buf[1] = (num % 10) + 48;
	}
}
 8000ce8:	e01f      	b.n	8000d2a <number_to_string+0x66>
	}else if (num >= 10 && num <99){
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d91c      	bls.n	8000d2a <number_to_string+0x66>
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b62      	cmp	r3, #98	; 0x62
 8000cf4:	d819      	bhi.n	8000d2a <number_to_string+0x66>
		buf[0] = (num / 10) + 48;
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a0f      	ldr	r2, [pc, #60]	; (8000d38 <number_to_string+0x74>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	08db      	lsrs	r3, r3, #3
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	3330      	adds	r3, #48	; 0x30
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	701a      	strb	r2, [r3, #0]
		buf[1] = (num % 10) + 48;
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <number_to_string+0x74>)
 8000d0e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d12:	08d9      	lsrs	r1, r3, #3
 8000d14:	460b      	mov	r3, r1
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	3230      	adds	r2, #48	; 0x30
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	cccccccd 	.word	0xcccccccd

08000d3c <time_to_string>:
 * @param[in]  rtc_time					- Time handler.
 *
 * @return     char*					- Returned string in this format: hh:mm:ss.
 */

char *time_to_string(RTC_time_t *rtc_time){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	static char buf[9];
	buf[2] = ':';
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <time_to_string+0x48>)
 8000d46:	223a      	movs	r2, #58	; 0x3a
 8000d48:	709a      	strb	r2, [r3, #2]
	buf[5] = ':';
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <time_to_string+0x48>)
 8000d4c:	223a      	movs	r2, #58	; 0x3a
 8000d4e:	715a      	strb	r2, [r3, #5]

	number_to_string(rtc_time->hours, buf);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	789b      	ldrb	r3, [r3, #2]
 8000d54:	490b      	ldr	r1, [pc, #44]	; (8000d84 <time_to_string+0x48>)
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ffb4 	bl	8000cc4 <number_to_string>
	number_to_string(rtc_time->minutes, &buf[3]);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	4909      	ldr	r1, [pc, #36]	; (8000d88 <time_to_string+0x4c>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ffae 	bl	8000cc4 <number_to_string>
	number_to_string(rtc_time->seconds, &buf[6]);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <time_to_string+0x50>)
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ffa8 	bl	8000cc4 <number_to_string>

	buf[8] = '\0';
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <time_to_string+0x48>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	721a      	strb	r2, [r3, #8]

	return buf;
 8000d7a:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <time_to_string+0x48>)
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200001b4 	.word	0x200001b4
 8000d88:	200001b7 	.word	0x200001b7
 8000d8c:	200001ba 	.word	0x200001ba

08000d90 <date_to_string>:
 *
 * @return     char*					- Returned string in this format: dd/mm/20yy.
 */

//
char *date_to_string(RTC_date_t *rtc_date){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	static char buf[11];

	number_to_string(rtc_date->date, buf);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	789b      	ldrb	r3, [r3, #2]
 8000d9c:	4911      	ldr	r1, [pc, #68]	; (8000de4 <date_to_string+0x54>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff90 	bl	8000cc4 <number_to_string>
	buf[2] = '/';
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <date_to_string+0x54>)
 8000da6:	222f      	movs	r2, #47	; 0x2f
 8000da8:	709a      	strb	r2, [r3, #2]
	number_to_string(rtc_date->month, &buf[3]);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <date_to_string+0x58>)
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff87 	bl	8000cc4 <number_to_string>
	buf[5] = '/';
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <date_to_string+0x54>)
 8000db8:	222f      	movs	r2, #47	; 0x2f
 8000dba:	715a      	strb	r2, [r3, #5]
	buf[6] = '2';
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <date_to_string+0x54>)
 8000dbe:	2232      	movs	r2, #50	; 0x32
 8000dc0:	719a      	strb	r2, [r3, #6]
	buf[7] = '0';
 8000dc2:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <date_to_string+0x54>)
 8000dc4:	2230      	movs	r2, #48	; 0x30
 8000dc6:	71da      	strb	r2, [r3, #7]
	number_to_string(rtc_date->year, &buf[8]);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	785b      	ldrb	r3, [r3, #1]
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <date_to_string+0x5c>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff78 	bl	8000cc4 <number_to_string>
	buf[10] = '\0';
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <date_to_string+0x54>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	729a      	strb	r2, [r3, #10]

	return buf;
 8000dda:	4b02      	ldr	r3, [pc, #8]	; (8000de4 <date_to_string+0x54>)
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200001c0 	.word	0x200001c0
 8000de8:	200001c3 	.word	0x200001c3
 8000dec:	200001c8 	.word	0x200001c8

08000df0 <num_returned>:
 * 										- The only way to accept a number is by pressing the "D" key.
 *
 * @return    uint8_t					- Returned the final number.
 */

uint8_t num_returned(){
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
	uint8_t key;
	uint8_t num_buf[2];
	char data[2];
	uint8_t num;

	lcd_send_command(&lcd, LCD_CMD_Don_nC_BL);
 8000df6:	210d      	movs	r1, #13
 8000df8:	4829      	ldr	r0, [pc, #164]	; (8000ea0 <num_returned+0xb0>)
 8000dfa:	f7ff fc75 	bl	80006e8 <lcd_send_command>
	while(!key_selected(&keypad, &key));
 8000dfe:	bf00      	nop
 8000e00:	1dbb      	adds	r3, r7, #6
 8000e02:	4619      	mov	r1, r3
 8000e04:	4827      	ldr	r0, [pc, #156]	; (8000ea4 <num_returned+0xb4>)
 8000e06:	f7ff fc0d 	bl	8000624 <key_selected>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f7      	beq.n	8000e00 <num_returned+0x10>
	num_buf[0] = key;
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	713b      	strb	r3, [r7, #4]
	sprintf(data, "%d", key);
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	461a      	mov	r2, r3
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4923      	ldr	r1, [pc, #140]	; (8000ea8 <num_returned+0xb8>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f003 fa85 	bl	800432c <siprintf>
	lcd_print_string(&lcd, data);
 8000e22:	463b      	mov	r3, r7
 8000e24:	4619      	mov	r1, r3
 8000e26:	481e      	ldr	r0, [pc, #120]	; (8000ea0 <num_returned+0xb0>)
 8000e28:	f7ff fc94 	bl	8000754 <lcd_print_string>

	while(!key_selected(&keypad, &key));
 8000e2c:	bf00      	nop
 8000e2e:	1dbb      	adds	r3, r7, #6
 8000e30:	4619      	mov	r1, r3
 8000e32:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <num_returned+0xb4>)
 8000e34:	f7ff fbf6 	bl	8000624 <key_selected>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f7      	beq.n	8000e2e <num_returned+0x3e>
	if(key != 'D'){
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	2b44      	cmp	r3, #68	; 0x44
 8000e42:	d025      	beq.n	8000e90 <num_returned+0xa0>
		num_buf[1] = key;
 8000e44:	79bb      	ldrb	r3, [r7, #6]
 8000e46:	717b      	strb	r3, [r7, #5]
		sprintf(data, "%d", key);
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4916      	ldr	r1, [pc, #88]	; (8000ea8 <num_returned+0xb8>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fa6b 	bl	800432c <siprintf>
		lcd_print_string(&lcd, data);
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4811      	ldr	r0, [pc, #68]	; (8000ea0 <num_returned+0xb0>)
 8000e5c:	f7ff fc7a 	bl	8000754 <lcd_print_string>
		while(!key_selected(&keypad, &key));
 8000e60:	bf00      	nop
 8000e62:	1dbb      	adds	r3, r7, #6
 8000e64:	4619      	mov	r1, r3
 8000e66:	480f      	ldr	r0, [pc, #60]	; (8000ea4 <num_returned+0xb4>)
 8000e68:	f7ff fbdc 	bl	8000624 <key_selected>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f7      	beq.n	8000e62 <num_returned+0x72>
		if(key == 'D'){
 8000e72:	79bb      	ldrb	r3, [r7, #6]
 8000e74:	2b44      	cmp	r3, #68	; 0x44
 8000e76:	d109      	bne.n	8000e8c <num_returned+0x9c>
			num = (num_buf[0] * 10) + num_buf[1];
 8000e78:	793b      	ldrb	r3, [r7, #4]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	4413      	add	r3, r2
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	e003      	b.n	8000e94 <num_returned+0xa4>
		}else{
			return 120;
 8000e8c:	2378      	movs	r3, #120	; 0x78
 8000e8e:	e002      	b.n	8000e96 <num_returned+0xa6>
		}
	}else{
		num = num_buf[0];
 8000e90:	793b      	ldrb	r3, [r7, #4]
 8000e92:	71fb      	strb	r3, [r7, #7]
	}

	return num;
 8000e94:	79fb      	ldrb	r3, [r7, #7]

}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001a4 	.word	0x200001a4
 8000ea4:	20000174 	.word	0x20000174
 8000ea8:	08005130 	.word	0x08005130

08000eac <select_day>:
 * 										- "D" is to select the day and "C" is to continuous to the next day.
 *
 * @param[in]  current_date				- Date handler.
 */

void select_day(RTC_date_t *current_date){
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b08c      	sub	sp, #48	; 0x30
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	lcd_display_clear(&lcd);
 8000eb4:	482b      	ldr	r0, [pc, #172]	; (8000f64 <select_day+0xb8>)
 8000eb6:	f7ff fcf9 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 8000eba:	482a      	ldr	r0, [pc, #168]	; (8000f64 <select_day+0xb8>)
 8000ebc:	f7ff fd05 	bl	80008ca <lcd_display_return_home>

	char *day_of_week[] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
 8000ec0:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <select_day+0xbc>)
 8000ec2:	f107 040c 	add.w	r4, r7, #12
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ecc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ed0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t key = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	72fb      	strb	r3, [r7, #11]
	int32_t counter = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t exit = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	while (!exit){
 8000ee2:	e036      	b.n	8000f52 <select_day+0xa6>
		lcd_print_string(&lcd, "Day: ");
 8000ee4:	4921      	ldr	r1, [pc, #132]	; (8000f6c <select_day+0xc0>)
 8000ee6:	481f      	ldr	r0, [pc, #124]	; (8000f64 <select_day+0xb8>)
 8000ee8:	f7ff fc34 	bl	8000754 <lcd_print_string>
		lcd_print_string(&lcd, day_of_week[counter]);
 8000eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	3330      	adds	r3, #48	; 0x30
 8000ef2:	443b      	add	r3, r7
 8000ef4:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481a      	ldr	r0, [pc, #104]	; (8000f64 <select_day+0xb8>)
 8000efc:	f7ff fc2a 	bl	8000754 <lcd_print_string>

		while(!key_selected(&keypad, &key));
 8000f00:	bf00      	nop
 8000f02:	f107 030b 	add.w	r3, r7, #11
 8000f06:	4619      	mov	r1, r3
 8000f08:	4819      	ldr	r0, [pc, #100]	; (8000f70 <select_day+0xc4>)
 8000f0a:	f7ff fb8b 	bl	8000624 <key_selected>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d0f6      	beq.n	8000f02 <select_day+0x56>
		if(key == 'D'){
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	2b44      	cmp	r3, #68	; 0x44
 8000f18:	d109      	bne.n	8000f2e <select_day+0x82>
			current_date->day = (counter+1);
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	70da      	strb	r2, [r3, #3]
			exit = 1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000f2c:	e00b      	b.n	8000f46 <select_day+0x9a>
		}else if(key == 'C'){
 8000f2e:	7afb      	ldrb	r3, [r7, #11]
 8000f30:	2b43      	cmp	r3, #67	; 0x43
 8000f32:	d108      	bne.n	8000f46 <select_day+0x9a>
			(counter == 6) ? (counter = 0) : (counter++);
 8000f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d102      	bne.n	8000f40 <select_day+0x94>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f3e:	e002      	b.n	8000f46 <select_day+0x9a>
 8000f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f42:	3301      	adds	r3, #1
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		lcd_display_clear(&lcd);
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <select_day+0xb8>)
 8000f48:	f7ff fcb0 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <select_day+0xb8>)
 8000f4e:	f7ff fcbc 	bl	80008ca <lcd_display_return_home>
	while (!exit){
 8000f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0c4      	beq.n	8000ee4 <select_day+0x38>

	}


}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3730      	adds	r7, #48	; 0x30
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bdb0      	pop	{r4, r5, r7, pc}
 8000f64:	200001a4 	.word	0x200001a4
 8000f68:	08005180 	.word	0x08005180
 8000f6c:	08005134 	.word	0x08005134
 8000f70:	20000174 	.word	0x20000174

08000f74 <config_menu>:
 *
 * @brief								- This function sets the time and date parameters.
 * 										- The code will keep executing until the returned value is in its own boundaries.
 */

void config_menu(){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
	RTC_time_t current_time;
	RTC_date_t current_date;

	// Time format will be fixed at 24-hours format
	current_time.time_format = TIME_FORMAT_24HRS;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	72fb      	strb	r3, [r7, #11]

	select_day(&current_date);
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff93 	bl	8000eac <select_day>
	uint8_t temp = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

	lcd_display_clear(&lcd);
 8000f8a:	48b3      	ldr	r0, [pc, #716]	; (8001258 <config_menu+0x2e4>)
 8000f8c:	f7ff fc8e 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 8000f90:	48b1      	ldr	r0, [pc, #708]	; (8001258 <config_menu+0x2e4>)
 8000f92:	f7ff fc9a 	bl	80008ca <lcd_display_return_home>

	lcd_print_string(&lcd, "Date: ");
 8000f96:	49b1      	ldr	r1, [pc, #708]	; (800125c <config_menu+0x2e8>)
 8000f98:	48af      	ldr	r0, [pc, #700]	; (8001258 <config_menu+0x2e4>)
 8000f9a:	f7ff fbdb 	bl	8000754 <lcd_print_string>
	temp = num_returned();
 8000f9e:	f7ff ff27 	bl	8000df0 <num_returned>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]

	while ((temp <= 0) || (temp >=32)){
 8000fa6:	e01f      	b.n	8000fe8 <config_menu+0x74>
		lcd_display_clear(&lcd);
 8000fa8:	48ab      	ldr	r0, [pc, #684]	; (8001258 <config_menu+0x2e4>)
 8000faa:	f7ff fc7f 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8000fae:	48aa      	ldr	r0, [pc, #680]	; (8001258 <config_menu+0x2e4>)
 8000fb0:	f7ff fc8b 	bl	80008ca <lcd_display_return_home>
		lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 8000fb4:	210c      	movs	r1, #12
 8000fb6:	48a8      	ldr	r0, [pc, #672]	; (8001258 <config_menu+0x2e4>)
 8000fb8:	f7ff fb96 	bl	80006e8 <lcd_send_command>
		lcd_print_string(&lcd, "Not valid!");
 8000fbc:	49a8      	ldr	r1, [pc, #672]	; (8001260 <config_menu+0x2ec>)
 8000fbe:	48a6      	ldr	r0, [pc, #664]	; (8001258 <config_menu+0x2e4>)
 8000fc0:	f7ff fbc8 	bl	8000754 <lcd_print_string>
		HAL_Delay(2000);
 8000fc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fc8:	f000 fe3c 	bl	8001c44 <HAL_Delay>
		lcd_display_clear(&lcd);
 8000fcc:	48a2      	ldr	r0, [pc, #648]	; (8001258 <config_menu+0x2e4>)
 8000fce:	f7ff fc6d 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8000fd2:	48a1      	ldr	r0, [pc, #644]	; (8001258 <config_menu+0x2e4>)
 8000fd4:	f7ff fc79 	bl	80008ca <lcd_display_return_home>
		lcd_print_string(&lcd, "Date: ");
 8000fd8:	49a0      	ldr	r1, [pc, #640]	; (800125c <config_menu+0x2e8>)
 8000fda:	489f      	ldr	r0, [pc, #636]	; (8001258 <config_menu+0x2e4>)
 8000fdc:	f7ff fbba 	bl	8000754 <lcd_print_string>
		temp = num_returned();
 8000fe0:	f7ff ff06 	bl	8000df0 <num_returned>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
	while ((temp <= 0) || (temp >=32)){
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0dc      	beq.n	8000fa8 <config_menu+0x34>
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b1f      	cmp	r3, #31
 8000ff2:	d8d9      	bhi.n	8000fa8 <config_menu+0x34>
	}

	current_date.date = temp;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	71bb      	strb	r3, [r7, #6]
	temp = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]

	lcd_display_clear(&lcd);
 8000ffc:	4896      	ldr	r0, [pc, #600]	; (8001258 <config_menu+0x2e4>)
 8000ffe:	f7ff fc55 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 8001002:	4895      	ldr	r0, [pc, #596]	; (8001258 <config_menu+0x2e4>)
 8001004:	f7ff fc61 	bl	80008ca <lcd_display_return_home>

	lcd_print_string(&lcd, "Month: ");
 8001008:	4996      	ldr	r1, [pc, #600]	; (8001264 <config_menu+0x2f0>)
 800100a:	4893      	ldr	r0, [pc, #588]	; (8001258 <config_menu+0x2e4>)
 800100c:	f7ff fba2 	bl	8000754 <lcd_print_string>
	temp = num_returned();
 8001010:	f7ff feee 	bl	8000df0 <num_returned>
 8001014:	4603      	mov	r3, r0
 8001016:	73fb      	strb	r3, [r7, #15]

	while ((temp <= 0) || (temp >=13)){
 8001018:	e01f      	b.n	800105a <config_menu+0xe6>
		lcd_display_clear(&lcd);
 800101a:	488f      	ldr	r0, [pc, #572]	; (8001258 <config_menu+0x2e4>)
 800101c:	f7ff fc46 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001020:	488d      	ldr	r0, [pc, #564]	; (8001258 <config_menu+0x2e4>)
 8001022:	f7ff fc52 	bl	80008ca <lcd_display_return_home>
		lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 8001026:	210c      	movs	r1, #12
 8001028:	488b      	ldr	r0, [pc, #556]	; (8001258 <config_menu+0x2e4>)
 800102a:	f7ff fb5d 	bl	80006e8 <lcd_send_command>
		lcd_print_string(&lcd, "Not valid!");
 800102e:	498c      	ldr	r1, [pc, #560]	; (8001260 <config_menu+0x2ec>)
 8001030:	4889      	ldr	r0, [pc, #548]	; (8001258 <config_menu+0x2e4>)
 8001032:	f7ff fb8f 	bl	8000754 <lcd_print_string>
		HAL_Delay(2000);
 8001036:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800103a:	f000 fe03 	bl	8001c44 <HAL_Delay>
		lcd_display_clear(&lcd);
 800103e:	4886      	ldr	r0, [pc, #536]	; (8001258 <config_menu+0x2e4>)
 8001040:	f7ff fc34 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001044:	4884      	ldr	r0, [pc, #528]	; (8001258 <config_menu+0x2e4>)
 8001046:	f7ff fc40 	bl	80008ca <lcd_display_return_home>
		lcd_print_string(&lcd, "Month: ");
 800104a:	4986      	ldr	r1, [pc, #536]	; (8001264 <config_menu+0x2f0>)
 800104c:	4882      	ldr	r0, [pc, #520]	; (8001258 <config_menu+0x2e4>)
 800104e:	f7ff fb81 	bl	8000754 <lcd_print_string>
		temp = num_returned();
 8001052:	f7ff fecd 	bl	8000df0 <num_returned>
 8001056:	4603      	mov	r3, r0
 8001058:	73fb      	strb	r3, [r7, #15]
	while ((temp <= 0) || (temp >=13)){
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0dc      	beq.n	800101a <config_menu+0xa6>
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d8d9      	bhi.n	800101a <config_menu+0xa6>
	}

	current_date.month = temp;
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	713b      	strb	r3, [r7, #4]
	temp = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]

	lcd_display_clear(&lcd);
 800106e:	487a      	ldr	r0, [pc, #488]	; (8001258 <config_menu+0x2e4>)
 8001070:	f7ff fc1c 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 8001074:	4878      	ldr	r0, [pc, #480]	; (8001258 <config_menu+0x2e4>)
 8001076:	f7ff fc28 	bl	80008ca <lcd_display_return_home>

	lcd_print_string(&lcd, "Year: 20");
 800107a:	497b      	ldr	r1, [pc, #492]	; (8001268 <config_menu+0x2f4>)
 800107c:	4876      	ldr	r0, [pc, #472]	; (8001258 <config_menu+0x2e4>)
 800107e:	f7ff fb69 	bl	8000754 <lcd_print_string>
	temp = num_returned();
 8001082:	f7ff feb5 	bl	8000df0 <num_returned>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]

	while ((temp <= 0) || (temp >=99)){
 800108a:	e01f      	b.n	80010cc <config_menu+0x158>
		lcd_display_clear(&lcd);
 800108c:	4872      	ldr	r0, [pc, #456]	; (8001258 <config_menu+0x2e4>)
 800108e:	f7ff fc0d 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001092:	4871      	ldr	r0, [pc, #452]	; (8001258 <config_menu+0x2e4>)
 8001094:	f7ff fc19 	bl	80008ca <lcd_display_return_home>
		lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 8001098:	210c      	movs	r1, #12
 800109a:	486f      	ldr	r0, [pc, #444]	; (8001258 <config_menu+0x2e4>)
 800109c:	f7ff fb24 	bl	80006e8 <lcd_send_command>
		lcd_print_string(&lcd, "Not valid!");
 80010a0:	496f      	ldr	r1, [pc, #444]	; (8001260 <config_menu+0x2ec>)
 80010a2:	486d      	ldr	r0, [pc, #436]	; (8001258 <config_menu+0x2e4>)
 80010a4:	f7ff fb56 	bl	8000754 <lcd_print_string>
		HAL_Delay(2000);
 80010a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ac:	f000 fdca 	bl	8001c44 <HAL_Delay>
		lcd_display_clear(&lcd);
 80010b0:	4869      	ldr	r0, [pc, #420]	; (8001258 <config_menu+0x2e4>)
 80010b2:	f7ff fbfb 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 80010b6:	4868      	ldr	r0, [pc, #416]	; (8001258 <config_menu+0x2e4>)
 80010b8:	f7ff fc07 	bl	80008ca <lcd_display_return_home>
		lcd_print_string(&lcd, "Year: 20");
 80010bc:	496a      	ldr	r1, [pc, #424]	; (8001268 <config_menu+0x2f4>)
 80010be:	4866      	ldr	r0, [pc, #408]	; (8001258 <config_menu+0x2e4>)
 80010c0:	f7ff fb48 	bl	8000754 <lcd_print_string>
		temp = num_returned();
 80010c4:	f7ff fe94 	bl	8000df0 <num_returned>
 80010c8:	4603      	mov	r3, r0
 80010ca:	73fb      	strb	r3, [r7, #15]
	while ((temp <= 0) || (temp >=99)){
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0dc      	beq.n	800108c <config_menu+0x118>
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b62      	cmp	r3, #98	; 0x62
 80010d6:	d8d9      	bhi.n	800108c <config_menu+0x118>
	}

	current_date.year = temp;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	717b      	strb	r3, [r7, #5]
	temp = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	73fb      	strb	r3, [r7, #15]

	lcd_display_clear(&lcd);
 80010e0:	485d      	ldr	r0, [pc, #372]	; (8001258 <config_menu+0x2e4>)
 80010e2:	f7ff fbe3 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 80010e6:	485c      	ldr	r0, [pc, #368]	; (8001258 <config_menu+0x2e4>)
 80010e8:	f7ff fbef 	bl	80008ca <lcd_display_return_home>

	lcd_print_string(&lcd, "Hour: ");
 80010ec:	495f      	ldr	r1, [pc, #380]	; (800126c <config_menu+0x2f8>)
 80010ee:	485a      	ldr	r0, [pc, #360]	; (8001258 <config_menu+0x2e4>)
 80010f0:	f7ff fb30 	bl	8000754 <lcd_print_string>
	temp = num_returned();
 80010f4:	f7ff fe7c 	bl	8000df0 <num_returned>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]

	while ((temp < 0) || (temp >=24)){
 80010fc:	e01f      	b.n	800113e <config_menu+0x1ca>
		lcd_display_clear(&lcd);
 80010fe:	4856      	ldr	r0, [pc, #344]	; (8001258 <config_menu+0x2e4>)
 8001100:	f7ff fbd4 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001104:	4854      	ldr	r0, [pc, #336]	; (8001258 <config_menu+0x2e4>)
 8001106:	f7ff fbe0 	bl	80008ca <lcd_display_return_home>
		lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 800110a:	210c      	movs	r1, #12
 800110c:	4852      	ldr	r0, [pc, #328]	; (8001258 <config_menu+0x2e4>)
 800110e:	f7ff faeb 	bl	80006e8 <lcd_send_command>
		lcd_print_string(&lcd, "Not valid!");
 8001112:	4953      	ldr	r1, [pc, #332]	; (8001260 <config_menu+0x2ec>)
 8001114:	4850      	ldr	r0, [pc, #320]	; (8001258 <config_menu+0x2e4>)
 8001116:	f7ff fb1d 	bl	8000754 <lcd_print_string>
		HAL_Delay(2000);
 800111a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800111e:	f000 fd91 	bl	8001c44 <HAL_Delay>
		lcd_display_clear(&lcd);
 8001122:	484d      	ldr	r0, [pc, #308]	; (8001258 <config_menu+0x2e4>)
 8001124:	f7ff fbc2 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001128:	484b      	ldr	r0, [pc, #300]	; (8001258 <config_menu+0x2e4>)
 800112a:	f7ff fbce 	bl	80008ca <lcd_display_return_home>
		lcd_print_string(&lcd, "Hours: ");
 800112e:	4950      	ldr	r1, [pc, #320]	; (8001270 <config_menu+0x2fc>)
 8001130:	4849      	ldr	r0, [pc, #292]	; (8001258 <config_menu+0x2e4>)
 8001132:	f7ff fb0f 	bl	8000754 <lcd_print_string>
		temp = num_returned();
 8001136:	f7ff fe5b 	bl	8000df0 <num_returned>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]
	while ((temp < 0) || (temp >=24)){
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b17      	cmp	r3, #23
 8001142:	d8dc      	bhi.n	80010fe <config_menu+0x18a>
	}

	current_time.hours = temp;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	72bb      	strb	r3, [r7, #10]
	temp = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]

	lcd_display_clear(&lcd);
 800114c:	4842      	ldr	r0, [pc, #264]	; (8001258 <config_menu+0x2e4>)
 800114e:	f7ff fbad 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 8001152:	4841      	ldr	r0, [pc, #260]	; (8001258 <config_menu+0x2e4>)
 8001154:	f7ff fbb9 	bl	80008ca <lcd_display_return_home>

	lcd_print_string(&lcd, "Minutes: ");
 8001158:	4946      	ldr	r1, [pc, #280]	; (8001274 <config_menu+0x300>)
 800115a:	483f      	ldr	r0, [pc, #252]	; (8001258 <config_menu+0x2e4>)
 800115c:	f7ff fafa 	bl	8000754 <lcd_print_string>
	temp = num_returned();
 8001160:	f7ff fe46 	bl	8000df0 <num_returned>
 8001164:	4603      	mov	r3, r0
 8001166:	73fb      	strb	r3, [r7, #15]

	while ((temp < 0) || (temp >=60)){
 8001168:	e01f      	b.n	80011aa <config_menu+0x236>
		lcd_display_clear(&lcd);
 800116a:	483b      	ldr	r0, [pc, #236]	; (8001258 <config_menu+0x2e4>)
 800116c:	f7ff fb9e 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001170:	4839      	ldr	r0, [pc, #228]	; (8001258 <config_menu+0x2e4>)
 8001172:	f7ff fbaa 	bl	80008ca <lcd_display_return_home>
		lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 8001176:	210c      	movs	r1, #12
 8001178:	4837      	ldr	r0, [pc, #220]	; (8001258 <config_menu+0x2e4>)
 800117a:	f7ff fab5 	bl	80006e8 <lcd_send_command>
		lcd_print_string(&lcd, "Not valid!");
 800117e:	4938      	ldr	r1, [pc, #224]	; (8001260 <config_menu+0x2ec>)
 8001180:	4835      	ldr	r0, [pc, #212]	; (8001258 <config_menu+0x2e4>)
 8001182:	f7ff fae7 	bl	8000754 <lcd_print_string>
		HAL_Delay(2000);
 8001186:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800118a:	f000 fd5b 	bl	8001c44 <HAL_Delay>
		lcd_display_clear(&lcd);
 800118e:	4832      	ldr	r0, [pc, #200]	; (8001258 <config_menu+0x2e4>)
 8001190:	f7ff fb8c 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001194:	4830      	ldr	r0, [pc, #192]	; (8001258 <config_menu+0x2e4>)
 8001196:	f7ff fb98 	bl	80008ca <lcd_display_return_home>
		lcd_print_string(&lcd, "Minutes: ");
 800119a:	4936      	ldr	r1, [pc, #216]	; (8001274 <config_menu+0x300>)
 800119c:	482e      	ldr	r0, [pc, #184]	; (8001258 <config_menu+0x2e4>)
 800119e:	f7ff fad9 	bl	8000754 <lcd_print_string>
		temp = num_returned();
 80011a2:	f7ff fe25 	bl	8000df0 <num_returned>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
	while ((temp < 0) || (temp >=60)){
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b3b      	cmp	r3, #59	; 0x3b
 80011ae:	d8dc      	bhi.n	800116a <config_menu+0x1f6>
	}

	current_time.minutes = temp;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	727b      	strb	r3, [r7, #9]
	temp = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]

	lcd_display_clear(&lcd);
 80011b8:	4827      	ldr	r0, [pc, #156]	; (8001258 <config_menu+0x2e4>)
 80011ba:	f7ff fb77 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 80011be:	4826      	ldr	r0, [pc, #152]	; (8001258 <config_menu+0x2e4>)
 80011c0:	f7ff fb83 	bl	80008ca <lcd_display_return_home>

	lcd_print_string(&lcd, "Seconds: ");
 80011c4:	492c      	ldr	r1, [pc, #176]	; (8001278 <config_menu+0x304>)
 80011c6:	4824      	ldr	r0, [pc, #144]	; (8001258 <config_menu+0x2e4>)
 80011c8:	f7ff fac4 	bl	8000754 <lcd_print_string>
	temp = num_returned();
 80011cc:	f7ff fe10 	bl	8000df0 <num_returned>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]

	while ((temp < 0) || (temp >=60)){
 80011d4:	e01f      	b.n	8001216 <config_menu+0x2a2>
		lcd_display_clear(&lcd);
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <config_menu+0x2e4>)
 80011d8:	f7ff fb68 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 80011dc:	481e      	ldr	r0, [pc, #120]	; (8001258 <config_menu+0x2e4>)
 80011de:	f7ff fb74 	bl	80008ca <lcd_display_return_home>
		lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 80011e2:	210c      	movs	r1, #12
 80011e4:	481c      	ldr	r0, [pc, #112]	; (8001258 <config_menu+0x2e4>)
 80011e6:	f7ff fa7f 	bl	80006e8 <lcd_send_command>
		lcd_print_string(&lcd, "Not valid!");
 80011ea:	491d      	ldr	r1, [pc, #116]	; (8001260 <config_menu+0x2ec>)
 80011ec:	481a      	ldr	r0, [pc, #104]	; (8001258 <config_menu+0x2e4>)
 80011ee:	f7ff fab1 	bl	8000754 <lcd_print_string>
		HAL_Delay(2000);
 80011f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011f6:	f000 fd25 	bl	8001c44 <HAL_Delay>
		lcd_display_clear(&lcd);
 80011fa:	4817      	ldr	r0, [pc, #92]	; (8001258 <config_menu+0x2e4>)
 80011fc:	f7ff fb56 	bl	80008ac <lcd_display_clear>
		lcd_display_return_home(&lcd);
 8001200:	4815      	ldr	r0, [pc, #84]	; (8001258 <config_menu+0x2e4>)
 8001202:	f7ff fb62 	bl	80008ca <lcd_display_return_home>
		lcd_print_string(&lcd, "Seconds: ");
 8001206:	491c      	ldr	r1, [pc, #112]	; (8001278 <config_menu+0x304>)
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <config_menu+0x2e4>)
 800120a:	f7ff faa3 	bl	8000754 <lcd_print_string>
		temp = num_returned();
 800120e:	f7ff fdef 	bl	8000df0 <num_returned>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
	while ((temp < 0) || (temp >=60)){
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b3b      	cmp	r3, #59	; 0x3b
 800121a:	d8dc      	bhi.n	80011d6 <config_menu+0x262>
	}

	current_time.seconds = temp;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	723b      	strb	r3, [r7, #8]
	temp = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

	lcd_display_clear(&lcd);
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <config_menu+0x2e4>)
 8001226:	f7ff fb41 	bl	80008ac <lcd_display_clear>
	lcd_display_return_home(&lcd);
 800122a:	480b      	ldr	r0, [pc, #44]	; (8001258 <config_menu+0x2e4>)
 800122c:	f7ff fb4d 	bl	80008ca <lcd_display_return_home>
	lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 8001230:	210c      	movs	r1, #12
 8001232:	4809      	ldr	r0, [pc, #36]	; (8001258 <config_menu+0x2e4>)
 8001234:	f7ff fa58 	bl	80006e8 <lcd_send_command>

	rtc_set_current_time(&rtc, &current_time);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <config_menu+0x308>)
 8001240:	f7ff fbad 	bl	800099e <rtc_set_current_time>
	rtc_set_current_date(&rtc, &current_date);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <config_menu+0x308>)
 800124a:	f7ff fbf7 	bl	8000a3c <rtc_set_current_date>

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001a4 	.word	0x200001a4
 800125c:	0800519c 	.word	0x0800519c
 8001260:	080051a4 	.word	0x080051a4
 8001264:	080051b0 	.word	0x080051b0
 8001268:	080051b8 	.word	0x080051b8
 800126c:	080051c4 	.word	0x080051c4
 8001270:	080051cc 	.word	0x080051cc
 8001274:	080051d4 	.word	0x080051d4
 8001278:	080051e0 	.word	0x080051e0
 800127c:	200001ac 	.word	0x200001ac

08001280 <HAL_TIM_PeriodElapsedCallback>:
 * @brief								- Callback function after TIMER6 issued an interrupt.
 *
 * @param[in]  htim						- Timer handler.
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	RTC_time_t current_time;
	RTC_date_t current_date;

	lcd_set_cursor(&lcd, 1,5);
 8001288:	2205      	movs	r2, #5
 800128a:	2101      	movs	r1, #1
 800128c:	482f      	ldr	r0, [pc, #188]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800128e:	f7ff fb2b 	bl	80008e8 <lcd_set_cursor>

	rtc_get_current_time(&rtc, &current_time);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	482d      	ldr	r0, [pc, #180]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800129a:	f7ff fc04 	bl	8000aa6 <rtc_get_current_time>
	rtc_get_current_date(&rtc, &current_date);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	4619      	mov	r1, r3
 80012a4:	482a      	ldr	r0, [pc, #168]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012a6:	f7ff fc4d 	bl	8000b44 <rtc_get_current_date>

	lcd_print_string(&lcd, time_to_string(&current_time));
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fd44 	bl	8000d3c <time_to_string>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4824      	ldr	r0, [pc, #144]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012ba:	f7ff fa4b 	bl	8000754 <lcd_print_string>

	lcd_set_cursor(&lcd, 2,1);
 80012be:	2201      	movs	r2, #1
 80012c0:	2102      	movs	r1, #2
 80012c2:	4822      	ldr	r0, [pc, #136]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012c4:	f7ff fb10 	bl	80008e8 <lcd_set_cursor>
	lcd_print_string(&lcd, date_to_string(&current_date));
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd5f 	bl	8000d90 <date_to_string>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4619      	mov	r1, r3
 80012d6:	481d      	ldr	r0, [pc, #116]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012d8:	f7ff fa3c 	bl	8000754 <lcd_print_string>
	lcd_send_command(&lcd, LCD_CMD_MCR);
 80012dc:	2114      	movs	r1, #20
 80012de:	481b      	ldr	r0, [pc, #108]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012e0:	f7ff fa02 	bl	80006e8 <lcd_send_command>
	lcd_print_string(&lcd, "<");
 80012e4:	491b      	ldr	r1, [pc, #108]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80012e6:	4819      	ldr	r0, [pc, #100]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80012e8:	f7ff fa34 	bl	8000754 <lcd_print_string>
	lcd_print_string(&lcd, DAY_OF_WEEK(current_date.day));
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d01f      	beq.n	8001332 <HAL_TIM_PeriodElapsedCallback+0xb2>
 80012f2:	7afb      	ldrb	r3, [r7, #11]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d01a      	beq.n	800132e <HAL_TIM_PeriodElapsedCallback+0xae>
 80012f8:	7afb      	ldrb	r3, [r7, #11]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d015      	beq.n	800132a <HAL_TIM_PeriodElapsedCallback+0xaa>
 80012fe:	7afb      	ldrb	r3, [r7, #11]
 8001300:	2b04      	cmp	r3, #4
 8001302:	d010      	beq.n	8001326 <HAL_TIM_PeriodElapsedCallback+0xa6>
 8001304:	7afb      	ldrb	r3, [r7, #11]
 8001306:	2b05      	cmp	r3, #5
 8001308:	d00b      	beq.n	8001322 <HAL_TIM_PeriodElapsedCallback+0xa2>
 800130a:	7afb      	ldrb	r3, [r7, #11]
 800130c:	2b06      	cmp	r3, #6
 800130e:	d006      	beq.n	800131e <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001310:	7afb      	ldrb	r3, [r7, #11]
 8001312:	2b07      	cmp	r3, #7
 8001314:	d101      	bne.n	800131a <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001318:	e00c      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0xb4>
 800131a:	2300      	movs	r3, #0
 800131c:	e00a      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0xb4>
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001320:	e008      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001324:	e006      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001328:	e004      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0xb4>
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800132c:	e002      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0xb4>
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001330:	e000      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001332:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001338:	f7ff fa0c 	bl	8000754 <lcd_print_string>
	lcd_print_string(&lcd, ">");
 800133c:	490d      	ldr	r1, [pc, #52]	; (8001374 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001340:	f7ff fa08 	bl	8000754 <lcd_print_string>
}
 8001344:	bf00      	nop
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200001a4 	.word	0x200001a4
 8001350:	200001ac 	.word	0x200001ac
 8001354:	080051ec 	.word	0x080051ec
 8001358:	080051f0 	.word	0x080051f0
 800135c:	080051f4 	.word	0x080051f4
 8001360:	080051f8 	.word	0x080051f8
 8001364:	080051fc 	.word	0x080051fc
 8001368:	08005200 	.word	0x08005200
 800136c:	08005204 	.word	0x08005204
 8001370:	08005208 	.word	0x08005208
 8001374:	0800520c 	.word	0x0800520c

08001378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800137e:	f000 fbef 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001382:	f000 f84d 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001386:	f000 f93b 	bl	8001600 <MX_GPIO_Init>
  MX_I2C1_Init();
 800138a:	f000 f8a7 	bl	80014dc <MX_I2C1_Init>
  MX_I2C2_Init();
 800138e:	f000 f8d3 	bl	8001538 <MX_I2C2_Init>
  MX_TIM6_Init();
 8001392:	f000 f8ff 	bl	8001594 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Initialization of external modules
  keypad = keypad_init();
 8001396:	4c1a      	ldr	r4, [pc, #104]	; (8001400 <main+0x88>)
 8001398:	463b      	mov	r3, r7
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f9b0 	bl	8001700 <keypad_init>
 80013a0:	4625      	mov	r5, r4
 80013a2:	463c      	mov	r4, r7
 80013a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013b0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  lcd_init_I2C(&lcd, &hi2c1);
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <main+0x8c>)
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <main+0x90>)
 80013b8:	f7ff fa21 	bl	80007fe <lcd_init_I2C>
  if (rtc_init(&rtc, &hi2c2)){
 80013bc:	4913      	ldr	r1, [pc, #76]	; (800140c <main+0x94>)
 80013be:	4814      	ldr	r0, [pc, #80]	; (8001410 <main+0x98>)
 80013c0:	f7ff fad0 	bl	8000964 <rtc_init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <main+0x5a>
	printf("RTC init has failed\n");
 80013ca:	4812      	ldr	r0, [pc, #72]	; (8001414 <main+0x9c>)
 80013cc:	f002 ffa6 	bl	800431c <puts>
	while(1);
 80013d0:	e7fe      	b.n	80013d0 <main+0x58>
  }

  // Initialising lcd
  lcd_set_cursor(&lcd, 1, 3);
 80013d2:	2203      	movs	r2, #3
 80013d4:	2101      	movs	r1, #1
 80013d6:	480c      	ldr	r0, [pc, #48]	; (8001408 <main+0x90>)
 80013d8:	f7ff fa86 	bl	80008e8 <lcd_set_cursor>
  lcd_send_command(&lcd, LCD_CMD_Don_nC_nBL);
 80013dc:	210c      	movs	r1, #12
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <main+0x90>)
 80013e0:	f7ff f982 	bl	80006e8 <lcd_send_command>
  lcd_print_string(&lcd, "Initialising");
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <main+0xa0>)
 80013e6:	4808      	ldr	r0, [pc, #32]	; (8001408 <main+0x90>)
 80013e8:	f7ff f9b4 	bl	8000754 <lcd_print_string>

  HAL_Delay(2000);
 80013ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013f0:	f000 fc28 	bl	8001c44 <HAL_Delay>

  config_menu();
 80013f4:	f7ff fdbe 	bl	8000f74 <config_menu>

  HAL_TIM_Base_Start_IT(&htim6);
 80013f8:	4808      	ldr	r0, [pc, #32]	; (800141c <main+0xa4>)
 80013fa:	f002 fba9 	bl	8003b50 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <main+0x86>
 8001400:	20000174 	.word	0x20000174
 8001404:	20000084 	.word	0x20000084
 8001408:	200001a4 	.word	0x200001a4
 800140c:	200000d8 	.word	0x200000d8
 8001410:	200001ac 	.word	0x200001ac
 8001414:	08005210 	.word	0x08005210
 8001418:	08005224 	.word	0x08005224
 800141c:	2000012c 	.word	0x2000012c

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	; 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2230      	movs	r2, #48	; 0x30
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f874 	bl	800451c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	4b22      	ldr	r3, [pc, #136]	; (80014d4 <SystemClock_Config+0xb4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <SystemClock_Config+0xb4>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	; 0x40
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <SystemClock_Config+0xb4>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <SystemClock_Config+0xb8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <SystemClock_Config+0xb8>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <SystemClock_Config+0xb8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	2310      	movs	r3, #16
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f001 fe89 	bl	80031a8 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800149c:	f000 f972 	bl	8001784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f002 f8ec 	bl	8003698 <HAL_RCC_ClockConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014c6:	f000 f95d 	bl	8001784 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3750      	adds	r7, #80	; 0x50
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <MX_I2C1_Init+0x50>)
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <MX_I2C1_Init+0x54>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_I2C1_Init+0x50>)
 80014e8:	4a12      	ldr	r2, [pc, #72]	; (8001534 <MX_I2C1_Init+0x58>)
 80014ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_I2C1_Init+0x50>)
 80014fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <MX_I2C1_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_I2C1_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <MX_I2C1_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_I2C1_Init+0x50>)
 8001514:	2200      	movs	r2, #0
 8001516:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001518:	4804      	ldr	r0, [pc, #16]	; (800152c <MX_I2C1_Init+0x50>)
 800151a:	f000 feaf 	bl	800227c <HAL_I2C_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001524:	f000 f92e 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000084 	.word	0x20000084
 8001530:	40005400 	.word	0x40005400
 8001534:	000186a0 	.word	0x000186a0

08001538 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_I2C2_Init+0x50>)
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <MX_I2C2_Init+0x54>)
 8001540:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_I2C2_Init+0x50>)
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_I2C2_Init+0x58>)
 8001546:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_I2C2_Init+0x50>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_I2C2_Init+0x50>)
 8001550:	2200      	movs	r2, #0
 8001552:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_I2C2_Init+0x50>)
 8001556:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800155a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_I2C2_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_I2C2_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_I2C2_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_I2C2_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_I2C2_Init+0x50>)
 8001576:	f000 fe81 	bl	800227c <HAL_I2C_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001580:	f000 f900 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200000d8 	.word	0x200000d8
 800158c:	40005800 	.word	0x40005800
 8001590:	000186a0 	.word	0x000186a0

08001594 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <MX_TIM6_Init+0x64>)
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <MX_TIM6_Init+0x68>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 255;
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_TIM6_Init+0x64>)
 80015aa:	22ff      	movs	r2, #255	; 0xff
 80015ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <MX_TIM6_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 62499;
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_TIM6_Init+0x64>)
 80015b6:	f24f 4223 	movw	r2, #62499	; 0xf423
 80015ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_TIM6_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <MX_TIM6_Init+0x64>)
 80015c4:	f002 fa74 	bl	8003ab0 <HAL_TIM_Base_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80015ce:	f000 f8d9 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	4619      	mov	r1, r3
 80015de:	4806      	ldr	r0, [pc, #24]	; (80015f8 <MX_TIM6_Init+0x64>)
 80015e0:	f002 fcf6 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80015ea:	f000 f8cb 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000012c 	.word	0x2000012c
 80015fc:	40001000 	.word	0x40001000

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b30      	ldr	r3, [pc, #192]	; (80016dc <MX_GPIO_Init+0xdc>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a28      	ldr	r2, [pc, #160]	; (80016dc <MX_GPIO_Init+0xdc>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a21      	ldr	r2, [pc, #132]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <MX_GPIO_Init+0xdc>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0308 	and.w	r3, r3, #8
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800166a:	2200      	movs	r2, #0
 800166c:	210f      	movs	r1, #15
 800166e:	481c      	ldr	r0, [pc, #112]	; (80016e0 <MX_GPIO_Init+0xe0>)
 8001670:	f000 fdd2 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001674:	2301      	movs	r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001678:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	4816      	ldr	r0, [pc, #88]	; (80016e4 <MX_GPIO_Init+0xe4>)
 800168a:	f000 fc11 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800168e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001692:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	2301      	movs	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	480f      	ldr	r0, [pc, #60]	; (80016e0 <MX_GPIO_Init+0xe0>)
 80016a4:	f000 fc04 	bl	8001eb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80016a8:	230f      	movs	r3, #15
 80016aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4619      	mov	r1, r3
 80016be:	4808      	ldr	r0, [pc, #32]	; (80016e0 <MX_GPIO_Init+0xe0>)
 80016c0:	f000 fbf6 	bl	8001eb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 14, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	210e      	movs	r1, #14
 80016c8:	2006      	movs	r0, #6
 80016ca:	f000 fbba 	bl	8001e42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016ce:	2006      	movs	r0, #6
 80016d0:	f000 fbd3 	bl	8001e7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d4:	bf00      	nop
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020c00 	.word	0x40020c00
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
	config_menu();
 80016f2:	f7ff fc3f 	bl	8000f74 <config_menu>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <keypad_init>:

Keypad_HandleTypeDef keypad_init(void){
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b09c      	sub	sp, #112	; 0x70
 8001704:	af02      	add	r7, sp, #8
 8001706:	6078      	str	r0, [r7, #4]

    Keypad_HandleTypeDef keypad;

    Keypad_PinDef pin_columns[4] = {COLUMN_1_Pin, COLUMN_2_Pin, COLUMN_3_Pin, COLUMN_4_Pin};
 8001708:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <keypad_init+0x78>)
 800170a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800170e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001712:	e883 0003 	stmia.w	r3, {r0, r1}
    Keypad_PortDef port_columns[4] = { COLUMN_1_GPIO_Port, COLUMN_2_GPIO_Port, COLUMN_3_GPIO_Port, COLUMN_4_GPIO_Port };
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <keypad_init+0x7c>)
 8001718:	f107 0420 	add.w	r4, r7, #32
 800171c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800171e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    Keypad_PinDef pin_rows[4] = {ROW_1_Pin, ROW_2_Pin, ROW_3_Pin, ROW_4_Pin};
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <keypad_init+0x80>)
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	e892 0003 	ldmia.w	r2, {r0, r1}
 800172c:	e883 0003 	stmia.w	r3, {r0, r1}
    Keypad_PortDef port_rows[4] = { ROW_1_GPIO_Port, ROW_2_GPIO_Port, ROW_3_GPIO_Port, ROW_4_GPIO_Port };
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <keypad_init+0x7c>)
 8001732:	f107 0408 	add.w	r4, r7, #8
 8001736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    keypad = keypad_create(pin_rows, port_rows, pin_columns, port_columns);
 800173c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001740:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001744:	f107 0208 	add.w	r2, r7, #8
 8001748:	f107 0118 	add.w	r1, r7, #24
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4623      	mov	r3, r4
 8001754:	f7fe ff0a 	bl	800056c <keypad_create>

    return keypad;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	461d      	mov	r5, r3
 800175c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001768:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800176c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

}
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	3768      	adds	r7, #104	; 0x68
 8001774:	46bd      	mov	sp, r7
 8001776:	bdb0      	pop	{r4, r5, r7, pc}
 8001778:	08005234 	.word	0x08005234
 800177c:	0800523c 	.word	0x0800523c
 8001780:	0800524c 	.word	0x0800524c

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_MspInit+0x4c>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_MspInit+0x4c>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_MspInit+0x4c>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	603b      	str	r3, [r7, #0]
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_MspInit+0x4c>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_MspInit+0x4c>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_MspInit+0x4c>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800

080017e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a32      	ldr	r2, [pc, #200]	; (80018c8 <HAL_I2C_MspInit+0xe8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12c      	bne.n	800185c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	61bb      	str	r3, [r7, #24]
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <HAL_I2C_MspInit+0xec>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a30      	ldr	r2, [pc, #192]	; (80018cc <HAL_I2C_MspInit+0xec>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b2e      	ldr	r3, [pc, #184]	; (80018cc <HAL_I2C_MspInit+0xec>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
 800181c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800181e:	23c0      	movs	r3, #192	; 0xc0
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001822:	2312      	movs	r3, #18
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001826:	2301      	movs	r3, #1
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800182e:	2304      	movs	r3, #4
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4825      	ldr	r0, [pc, #148]	; (80018d0 <HAL_I2C_MspInit+0xf0>)
 800183a:	f000 fb39 	bl	8001eb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <HAL_I2C_MspInit+0xec>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a21      	ldr	r2, [pc, #132]	; (80018cc <HAL_I2C_MspInit+0xec>)
 8001848:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_I2C_MspInit+0xec>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800185a:	e031      	b.n	80018c0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_I2C_MspInit+0xf4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d12c      	bne.n	80018c0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_I2C_MspInit+0xec>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_I2C_MspInit+0xec>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_I2C_MspInit+0xec>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	613b      	str	r3, [r7, #16]
 8001880:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001882:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001888:	2312      	movs	r3, #18
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001894:	2304      	movs	r3, #4
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001898:	f107 031c 	add.w	r3, r7, #28
 800189c:	4619      	mov	r1, r3
 800189e:	480c      	ldr	r0, [pc, #48]	; (80018d0 <HAL_I2C_MspInit+0xf0>)
 80018a0:	f000 fb06 	bl	8001eb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_I2C_MspInit+0xec>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_I2C_MspInit+0xec>)
 80018ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018b2:	6413      	str	r3, [r2, #64]	; 0x40
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <HAL_I2C_MspInit+0xec>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3730      	adds	r7, #48	; 0x30
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40005400 	.word	0x40005400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020400 	.word	0x40020400
 80018d4:	40005800 	.word	0x40005800

080018d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0e      	ldr	r2, [pc, #56]	; (8001920 <HAL_TIM_Base_MspInit+0x48>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d115      	bne.n	8001916 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_TIM_Base_MspInit+0x4c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a0c      	ldr	r2, [pc, #48]	; (8001924 <HAL_TIM_Base_MspInit+0x4c>)
 80018f4:	f043 0310 	orr.w	r3, r3, #16
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_TIM_Base_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0310 	and.w	r3, r3, #16
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	210f      	movs	r1, #15
 800190a:	2036      	movs	r0, #54	; 0x36
 800190c:	f000 fa99 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001910:	2036      	movs	r0, #54	; 0x36
 8001912:	f000 fab2 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40001000 	.word	0x40001000
 8001924:	40023800 	.word	0x40023800

08001928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800192c:	e7fe      	b.n	800192c <NMI_Handler+0x4>

0800192e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <HardFault_Handler+0x4>

08001934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <MemManage_Handler+0x4>

0800193a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <BusFault_Handler+0x4>

08001940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <UsageFault_Handler+0x4>

08001946 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001974:	f000 f946 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}

0800197c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001980:	2001      	movs	r0, #1
 8001982:	f000 fc63 	bl	800224c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <TIM6_DAC_IRQHandler+0x10>)
 8001992:	f002 f94d 	bl	8003c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000012c 	.word	0x2000012c

080019a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	e00a      	b.n	80019c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019b2:	f3af 8000 	nop.w
 80019b6:	4601      	mov	r1, r0
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	60ba      	str	r2, [r7, #8]
 80019be:	b2ca      	uxtb	r2, r1
 80019c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dbf0      	blt.n	80019b2 <_read+0x12>
  }

  return len;
 80019d0:	687b      	ldr	r3, [r7, #4]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e009      	b.n	8001a00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	1c5a      	adds	r2, r3, #1
 80019f0:	60ba      	str	r2, [r7, #8]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf1      	blt.n	80019ec <_write+0x12>
  }
  return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_close>:

int _close(int file)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_isatty>:

int _isatty(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a52:	2301      	movs	r3, #1
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <_sbrk+0x5c>)
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <_sbrk+0x60>)
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <_sbrk+0x64>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <_sbrk+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d207      	bcs.n	8001abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aac:	f002 fd84 	bl	80045b8 <__errno>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	e009      	b.n	8001ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <_sbrk+0x64>)
 8001acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20020000 	.word	0x20020000
 8001adc:	00000400 	.word	0x00000400
 8001ae0:	200001cc 	.word	0x200001cc
 8001ae4:	20000320 	.word	0x20000320

08001ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <SystemInit+0x20>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <SystemInit+0x20>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b12:	490e      	ldr	r1, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b14:	4a0e      	ldr	r2, [pc, #56]	; (8001b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b28:	4c0b      	ldr	r4, [pc, #44]	; (8001b58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b36:	f7ff ffd7 	bl	8001ae8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f002 fd43 	bl	80045c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7ff fc1b 	bl	8001378 <main>
  bx  lr    
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b50:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 8001b54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001b58:	20000320 	.word	0x20000320

08001b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_Init+0x40>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_Init+0x40>)
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_Init+0x40>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 f94f 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f000 f808 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fdfc 	bl	8001790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f967 	bl	8001e96 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f000 f92f 	bl	8001e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008
 8001c28:	200001d0 	.word	0x200001d0

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200001d0 	.word	0x200001d0

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7ff ff8e 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff29 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff3e 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff8e 	bl	8001d80 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5d 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff31 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffa2 	bl	8001de8 <SysTick_Config>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b089      	sub	sp, #36	; 0x24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e16b      	b.n	80021a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	4013      	ands	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	f040 815a 	bne.w	800219e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d005      	beq.n	8001f02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d130      	bne.n	8001f64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f38:	2201      	movs	r2, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 0201 	and.w	r2, r3, #1
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d017      	beq.n	8001fa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d123      	bne.n	8001ff4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	220f      	movs	r2, #15
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	08da      	lsrs	r2, r3, #3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3208      	adds	r2, #8
 8001fee:	69b9      	ldr	r1, [r7, #24]
 8001ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f003 0203 	and.w	r2, r3, #3
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80b4 	beq.w	800219e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b60      	ldr	r3, [pc, #384]	; (80021bc <HAL_GPIO_Init+0x30c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a5f      	ldr	r2, [pc, #380]	; (80021bc <HAL_GPIO_Init+0x30c>)
 8002040:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_GPIO_Init+0x30c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002052:	4a5b      	ldr	r2, [pc, #364]	; (80021c0 <HAL_GPIO_Init+0x310>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	220f      	movs	r2, #15
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	; (80021c4 <HAL_GPIO_Init+0x314>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_Init+0x226>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a51      	ldr	r2, [pc, #324]	; (80021c8 <HAL_GPIO_Init+0x318>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x222>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a50      	ldr	r2, [pc, #320]	; (80021cc <HAL_GPIO_Init+0x31c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x21e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_GPIO_Init+0x320>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x21a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4e      	ldr	r2, [pc, #312]	; (80021d4 <HAL_GPIO_Init+0x324>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x216>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <HAL_GPIO_Init+0x328>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x212>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <HAL_GPIO_Init+0x32c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x20e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4b      	ldr	r2, [pc, #300]	; (80021e0 <HAL_GPIO_Init+0x330>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x20a>
 80020b6:	2307      	movs	r3, #7
 80020b8:	e00e      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e00c      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00a      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020c2:	2305      	movs	r3, #5
 80020c4:	e008      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020c6:	2304      	movs	r3, #4
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ca:	2303      	movs	r3, #3
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x228>
 80020d6:	2300      	movs	r3, #0
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e8:	4935      	ldr	r1, [pc, #212]	; (80021c0 <HAL_GPIO_Init+0x310>)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_GPIO_Init+0x334>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a32      	ldr	r2, [pc, #200]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800216e:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_GPIO_Init+0x334>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_GPIO_Init+0x334>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3301      	adds	r3, #1
 80021a2:	61fb      	str	r3, [r7, #28]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	f67f ae90 	bls.w	8001ecc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40013800 	.word	0x40013800
 80021c4:	40020000 	.word	0x40020000
 80021c8:	40020400 	.word	0x40020400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	40020c00 	.word	0x40020c00
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40021400 	.word	0x40021400
 80021dc:	40021800 	.word	0x40021800
 80021e0:	40021c00 	.word	0x40021c00
 80021e4:	40013c00 	.word	0x40013c00

080021e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002200:	2301      	movs	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e001      	b.n	800220a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002234:	e003      	b.n	800223e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	4013      	ands	r3, r2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002262:	4a05      	ldr	r2, [pc, #20]	; (8002278 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002264:	88fb      	ldrh	r3, [r7, #6]
 8002266:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fa3c 	bl	80016e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40013c00 	.word	0x40013c00

0800227c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e12b      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fa9c 	bl	80017e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022e0:	f001 fbd2 	bl	8003a88 <HAL_RCC_GetPCLK1Freq>
 80022e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4a81      	ldr	r2, [pc, #516]	; (80024f0 <HAL_I2C_Init+0x274>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d807      	bhi.n	8002300 <HAL_I2C_Init+0x84>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a80      	ldr	r2, [pc, #512]	; (80024f4 <HAL_I2C_Init+0x278>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	e006      	b.n	800230e <HAL_I2C_Init+0x92>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4a7d      	ldr	r2, [pc, #500]	; (80024f8 <HAL_I2C_Init+0x27c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e0e7      	b.n	80024e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a78      	ldr	r2, [pc, #480]	; (80024fc <HAL_I2C_Init+0x280>)
 800231a:	fba2 2303 	umull	r2, r3, r2, r3
 800231e:	0c9b      	lsrs	r3, r3, #18
 8002320:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d802      	bhi.n	8002350 <HAL_I2C_Init+0xd4>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3301      	adds	r3, #1
 800234e:	e009      	b.n	8002364 <HAL_I2C_Init+0xe8>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a69      	ldr	r2, [pc, #420]	; (8002500 <HAL_I2C_Init+0x284>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	3301      	adds	r3, #1
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	430b      	orrs	r3, r1
 800236a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002376:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	495c      	ldr	r1, [pc, #368]	; (80024f0 <HAL_I2C_Init+0x274>)
 8002380:	428b      	cmp	r3, r1
 8002382:	d819      	bhi.n	80023b8 <HAL_I2C_Init+0x13c>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e59      	subs	r1, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002392:	1c59      	adds	r1, r3, #1
 8002394:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002398:	400b      	ands	r3, r1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_I2C_Init+0x138>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e59      	subs	r1, r3, #1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b2:	e051      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b4:	2304      	movs	r3, #4
 80023b6:	e04f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d111      	bne.n	80023e4 <HAL_I2C_Init+0x168>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	440b      	add	r3, r1
 80023ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d2:	3301      	adds	r3, #1
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	2b00      	cmp	r3, #0
 80023da:	bf0c      	ite	eq
 80023dc:	2301      	moveq	r3, #1
 80023de:	2300      	movne	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e012      	b.n	800240a <HAL_I2C_Init+0x18e>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	0099      	lsls	r1, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023fa:	3301      	adds	r3, #1
 80023fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf0c      	ite	eq
 8002404:	2301      	moveq	r3, #1
 8002406:	2300      	movne	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Init+0x196>
 800240e:	2301      	movs	r3, #1
 8002410:	e022      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10e      	bne.n	8002438 <HAL_I2C_Init+0x1bc>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1e58      	subs	r0, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	440b      	add	r3, r1
 8002428:	fbb0 f3f3 	udiv	r3, r0, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002436:	e00f      	b.n	8002458 <HAL_I2C_Init+0x1dc>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	0099      	lsls	r1, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	fbb0 f3f3 	udiv	r3, r0, r3
 800244e:	3301      	adds	r3, #1
 8002450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002454:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	6809      	ldr	r1, [r1, #0]
 800245c:	4313      	orrs	r3, r2
 800245e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69da      	ldr	r2, [r3, #28]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6911      	ldr	r1, [r2, #16]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68d2      	ldr	r2, [r2, #12]
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	430b      	orrs	r3, r1
 800249a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	000186a0 	.word	0x000186a0
 80024f4:	001e847f 	.word	0x001e847f
 80024f8:	003d08ff 	.word	0x003d08ff
 80024fc:	431bde83 	.word	0x431bde83
 8002500:	10624dd3 	.word	0x10624dd3

08002504 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	461a      	mov	r2, r3
 8002510:	460b      	mov	r3, r1
 8002512:	817b      	strh	r3, [r7, #10]
 8002514:	4613      	mov	r3, r2
 8002516:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002518:	f7ff fb88 	bl	8001c2c <HAL_GetTick>
 800251c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b20      	cmp	r3, #32
 8002528:	f040 80e0 	bne.w	80026ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2319      	movs	r3, #25
 8002532:	2201      	movs	r2, #1
 8002534:	4970      	ldr	r1, [pc, #448]	; (80026f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fc58 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002542:	2302      	movs	r3, #2
 8002544:	e0d3      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2C_Master_Transmit+0x50>
 8002550:	2302      	movs	r3, #2
 8002552:	e0cc      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b01      	cmp	r3, #1
 8002568:	d007      	beq.n	800257a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0201 	orr.w	r2, r2, #1
 8002578:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002588:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2221      	movs	r2, #33	; 0x21
 800258e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2210      	movs	r2, #16
 8002596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	893a      	ldrh	r2, [r7, #8]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4a50      	ldr	r2, [pc, #320]	; (80026fc <HAL_I2C_Master_Transmit+0x1f8>)
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025bc:	8979      	ldrh	r1, [r7, #10]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6a3a      	ldr	r2, [r7, #32]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fac2 	bl	8002b4c <I2C_MasterRequestWrite>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e08d      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025e8:	e066      	b.n	80026b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	6a39      	ldr	r1, [r7, #32]
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fcd2 	bl	8002f98 <I2C_WaitOnTXEFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00d      	beq.n	8002616 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d107      	bne.n	8002612 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002610:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e06b      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b04      	cmp	r3, #4
 8002652:	d11b      	bne.n	800268c <HAL_I2C_Master_Transmit+0x188>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	d017      	beq.n	800268c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002684:	3b01      	subs	r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fcc2 	bl	800301a <I2C_WaitOnBTFFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2b04      	cmp	r3, #4
 80026a2:	d107      	bne.n	80026b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e01a      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d194      	bne.n	80025ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e000      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026ec:	2302      	movs	r3, #2
  }
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	00100002 	.word	0x00100002
 80026fc:	ffff0000 	.word	0xffff0000

08002700 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	; 0x30
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	461a      	mov	r2, r3
 800270c:	460b      	mov	r3, r1
 800270e:	817b      	strh	r3, [r7, #10]
 8002710:	4613      	mov	r3, r2
 8002712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002714:	f7ff fa8a 	bl	8001c2c <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b20      	cmp	r3, #32
 8002724:	f040 820b 	bne.w	8002b3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2319      	movs	r3, #25
 800272e:	2201      	movs	r2, #1
 8002730:	497c      	ldr	r1, [pc, #496]	; (8002924 <HAL_I2C_Master_Receive+0x224>)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fb5a 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
 8002740:	e1fe      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_I2C_Master_Receive+0x50>
 800274c:	2302      	movs	r3, #2
 800274e:	e1f7      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d007      	beq.n	8002776 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0201 	orr.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2222      	movs	r2, #34	; 0x22
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2210      	movs	r2, #16
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	893a      	ldrh	r2, [r7, #8]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_I2C_Master_Receive+0x228>)
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027b8:	8979      	ldrh	r1, [r7, #10]
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa46 	bl	8002c50 <I2C_MasterRequestRead>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1b8      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d113      	bne.n	80027fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	623b      	str	r3, [r7, #32]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	e18c      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002802:	2b01      	cmp	r3, #1
 8002804:	d11b      	bne.n	800283e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002814:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	61fb      	str	r3, [r7, #28]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	61fb      	str	r3, [r7, #28]
 800282a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e16c      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	2b02      	cmp	r3, #2
 8002844:	d11b      	bne.n	800287e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002854:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002864:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	e14c      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800288c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028a4:	e138      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	f200 80f1 	bhi.w	8002a92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d123      	bne.n	8002900 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fbed 	bl	800309c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e139      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e8:	3b01      	subs	r3, #1
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028fe:	e10b      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	2b02      	cmp	r3, #2
 8002906:	d14e      	bne.n	80029a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	4906      	ldr	r1, [pc, #24]	; (800292c <HAL_I2C_Master_Receive+0x22c>)
 8002912:	68f8      	ldr	r0, [r7, #12]
 8002914:	f000 fa6a 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e10e      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
 8002922:	bf00      	nop
 8002924:	00100002 	.word	0x00100002
 8002928:	ffff0000 	.word	0xffff0000
 800292c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	691a      	ldr	r2, [r3, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a4:	e0b8      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	2200      	movs	r2, #0
 80029ae:	4966      	ldr	r1, [pc, #408]	; (8002b48 <HAL_I2C_Master_Receive+0x448>)
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 fa1b 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0bf      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	2200      	movs	r2, #0
 8002a0a:	494f      	ldr	r1, [pc, #316]	; (8002b48 <HAL_I2C_Master_Receive+0x448>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f9ed 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e091      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a90:	e042      	b.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fb00 	bl	800309c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e04c      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d118      	bne.n	8002b18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f aec2 	bne.w	80028a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b3e:	2302      	movs	r3, #2
  }
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3728      	adds	r7, #40	; 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	00010004 	.word	0x00010004

08002b4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b08      	cmp	r3, #8
 8002b66:	d006      	beq.n	8002b76 <I2C_MasterRequestWrite+0x2a>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d003      	beq.n	8002b76 <I2C_MasterRequestWrite+0x2a>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b74:	d108      	bne.n	8002b88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00b      	b.n	8002ba0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	2b12      	cmp	r3, #18
 8002b8e:	d107      	bne.n	8002ba0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f91d 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc6:	d103      	bne.n	8002bd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e035      	b.n	8002c40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bdc:	d108      	bne.n	8002bf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bde:	897b      	ldrh	r3, [r7, #10]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	e01b      	b.n	8002c28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	11db      	asrs	r3, r3, #7
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0306 	and.w	r3, r3, #6
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f063 030f 	orn	r3, r3, #15
 8002c00:	b2da      	uxtb	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	490e      	ldr	r1, [pc, #56]	; (8002c48 <I2C_MasterRequestWrite+0xfc>)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f943 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e010      	b.n	8002c40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	4907      	ldr	r1, [pc, #28]	; (8002c4c <I2C_MasterRequestWrite+0x100>)
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 f933 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	00010008 	.word	0x00010008
 8002c4c:	00010002 	.word	0x00010002

08002c50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	d006      	beq.n	8002c8a <I2C_MasterRequestRead+0x3a>
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d003      	beq.n	8002c8a <I2C_MasterRequestRead+0x3a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c88:	d108      	bne.n	8002c9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e00b      	b.n	8002cb4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	2b11      	cmp	r3, #17
 8002ca2:	d107      	bne.n	8002cb4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 f893 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cda:	d103      	bne.n	8002ce4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e079      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002cf2:	897b      	ldrh	r3, [r7, #10]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f043 0301 	orr.w	r3, r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	e05f      	b.n	8002dc4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d04:	897b      	ldrh	r3, [r7, #10]
 8002d06:	11db      	asrs	r3, r3, #7
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0306 	and.w	r3, r3, #6
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f063 030f 	orn	r3, r3, #15
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4930      	ldr	r1, [pc, #192]	; (8002de4 <I2C_MasterRequestRead+0x194>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f8b9 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e054      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d32:	897b      	ldrh	r3, [r7, #10]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4929      	ldr	r1, [pc, #164]	; (8002de8 <I2C_MasterRequestRead+0x198>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f8a9 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e044      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f831 	bl	8002dec <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00d      	beq.n	8002dac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	d103      	bne.n	8002da8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e017      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	11db      	asrs	r3, r3, #7
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0306 	and.w	r3, r3, #6
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f063 030e 	orn	r3, r3, #14
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <I2C_MasterRequestRead+0x198>)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f865 	bl	8002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	00010008 	.word	0x00010008
 8002de8:	00010002 	.word	0x00010002

08002dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfc:	e025      	b.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d021      	beq.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fe ff11 	bl	8001c2c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d116      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e023      	b.n	8002e92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0c1b      	lsrs	r3, r3, #16
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10d      	bne.n	8002e70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	43da      	mvns	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	e00c      	b.n	8002e8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d0b6      	beq.n	8002dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ea8:	e051      	b.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb8:	d123      	bne.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ed2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e046      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d021      	beq.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fe fe8f 	bl	8001c2c <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d116      	bne.n	8002f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e020      	b.n	8002f90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	0c1b      	lsrs	r3, r3, #16
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10c      	bne.n	8002f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4013      	ands	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e00b      	b.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d18d      	bne.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa4:	e02d      	b.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 f8ce 	bl	8003148 <I2C_IsAcknowledgeFailed>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e02d      	b.n	8003012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d021      	beq.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fbe:	f7fe fe35 	bl	8001c2c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d116      	bne.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2220      	movs	r2, #32
 8002fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f043 0220 	orr.w	r2, r3, #32
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e007      	b.n	8003012 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300c:	2b80      	cmp	r3, #128	; 0x80
 800300e:	d1ca      	bne.n	8002fa6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003026:	e02d      	b.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f88d 	bl	8003148 <I2C_IsAcknowledgeFailed>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e02d      	b.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d021      	beq.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003040:	f7fe fdf4 	bl	8001c2c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d302      	bcc.n	8003056 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f043 0220 	orr.w	r2, r3, #32
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e007      	b.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b04      	cmp	r3, #4
 8003090:	d1ca      	bne.n	8003028 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030a8:	e042      	b.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d119      	bne.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0210 	mvn.w	r2, #16
 80030c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e029      	b.n	8003140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ec:	f7fe fd9e 	bl	8001c2c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d302      	bcc.n	8003102 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d116      	bne.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e007      	b.n	8003140 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d1b5      	bne.n	80030aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d11b      	bne.n	8003198 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003168:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e000      	b.n	800319a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e267      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d075      	beq.n	80032b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031c6:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d00c      	beq.n	80031ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d112      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b82      	ldr	r3, [pc, #520]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ea:	d10b      	bne.n	8003204 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	4b7e      	ldr	r3, [pc, #504]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d05b      	beq.n	80032b0 <HAL_RCC_OscConfig+0x108>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d157      	bne.n	80032b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e242      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d106      	bne.n	800321c <HAL_RCC_OscConfig+0x74>
 800320e:	4b76      	ldr	r3, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e01d      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003224:	d10c      	bne.n	8003240 <HAL_RCC_OscConfig+0x98>
 8003226:	4b70      	ldr	r3, [pc, #448]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6f      	ldr	r2, [pc, #444]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	4b6d      	ldr	r3, [pc, #436]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6c      	ldr	r2, [pc, #432]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e00b      	b.n	8003258 <HAL_RCC_OscConfig+0xb0>
 8003240:	4b69      	ldr	r3, [pc, #420]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a68      	ldr	r2, [pc, #416]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	4b66      	ldr	r3, [pc, #408]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a65      	ldr	r2, [pc, #404]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003256:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fce4 	bl	8001c2c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe fce0 	bl	8001c2c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e207      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b5b      	ldr	r3, [pc, #364]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0xc0>
 8003286:	e014      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fe fcd0 	bl	8001c2c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003290:	f7fe fccc 	bl	8001c2c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e1f3      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	4b51      	ldr	r3, [pc, #324]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f0      	bne.n	8003290 <HAL_RCC_OscConfig+0xe8>
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d063      	beq.n	8003386 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b47      	ldr	r3, [pc, #284]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d11c      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e1c7      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4937      	ldr	r1, [pc, #220]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800330a:	4313      	orrs	r3, r2
 800330c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	e03a      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d020      	beq.n	800335a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003318:	4b34      	ldr	r3, [pc, #208]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331e:	f7fe fc85 	bl	8001c2c <HAL_GetTick>
 8003322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003326:	f7fe fc81 	bl	8001c2c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e1a8      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	4b2b      	ldr	r3, [pc, #172]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b28      	ldr	r3, [pc, #160]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4925      	ldr	r1, [pc, #148]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 8003354:	4313      	orrs	r3, r2
 8003356:	600b      	str	r3, [r1, #0]
 8003358:	e015      	b.n	8003386 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <HAL_RCC_OscConfig+0x244>)
 800335c:	2200      	movs	r2, #0
 800335e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003360:	f7fe fc64 	bl	8001c2c <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003368:	f7fe fc60 	bl	8001c2c <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e187      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1f0      	bne.n	8003368 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	2b00      	cmp	r3, #0
 8003390:	d036      	beq.n	8003400 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <HAL_RCC_OscConfig+0x248>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fe fc44 	bl	8001c2c <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fe fc40 	bl	8001c2c <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e167      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	4b0b      	ldr	r3, [pc, #44]	; (80033e8 <HAL_RCC_OscConfig+0x240>)
 80033bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x200>
 80033c6:	e01b      	b.n	8003400 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_RCC_OscConfig+0x248>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fe fc2d 	bl	8001c2c <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	e00e      	b.n	80033f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fe fc29 	bl	8001c2c <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d907      	bls.n	80033f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e150      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 80033e8:	40023800 	.word	0x40023800
 80033ec:	42470000 	.word	0x42470000
 80033f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f4:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ea      	bne.n	80033d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8097 	beq.w	800353c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003412:	4b81      	ldr	r3, [pc, #516]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10f      	bne.n	800343e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800341e:	2300      	movs	r3, #0
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	4b7d      	ldr	r3, [pc, #500]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	4a7c      	ldr	r2, [pc, #496]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	; 0x40
 800342e:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	60bb      	str	r3, [r7, #8]
 8003438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343a:	2301      	movs	r3, #1
 800343c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343e:	4b77      	ldr	r3, [pc, #476]	; (800361c <HAL_RCC_OscConfig+0x474>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003446:	2b00      	cmp	r3, #0
 8003448:	d118      	bne.n	800347c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800344a:	4b74      	ldr	r3, [pc, #464]	; (800361c <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a73      	ldr	r2, [pc, #460]	; (800361c <HAL_RCC_OscConfig+0x474>)
 8003450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003456:	f7fe fbe9 	bl	8001c2c <HAL_GetTick>
 800345a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	e008      	b.n	8003470 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345e:	f7fe fbe5 	bl	8001c2c <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d901      	bls.n	8003470 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e10c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	4b6a      	ldr	r3, [pc, #424]	; (800361c <HAL_RCC_OscConfig+0x474>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d106      	bne.n	8003492 <HAL_RCC_OscConfig+0x2ea>
 8003484:	4b64      	ldr	r3, [pc, #400]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a63      	ldr	r2, [pc, #396]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	e01c      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b05      	cmp	r3, #5
 8003498:	d10c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x30c>
 800349a:	4b5f      	ldr	r3, [pc, #380]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a5e      	ldr	r2, [pc, #376]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a0:	f043 0304 	orr.w	r3, r3, #4
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	4b5c      	ldr	r3, [pc, #368]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a5b      	ldr	r2, [pc, #364]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	e00b      	b.n	80034cc <HAL_RCC_OscConfig+0x324>
 80034b4:	4b58      	ldr	r3, [pc, #352]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b8:	4a57      	ldr	r2, [pc, #348]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	6713      	str	r3, [r2, #112]	; 0x70
 80034c0:	4b55      	ldr	r3, [pc, #340]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a54      	ldr	r2, [pc, #336]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0304 	bic.w	r3, r3, #4
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fe fbaa 	bl	8001c2c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034dc:	f7fe fba6 	bl	8001c2c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e0cb      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f2:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ee      	beq.n	80034dc <HAL_RCC_OscConfig+0x334>
 80034fe:	e014      	b.n	800352a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003500:	f7fe fb94 	bl	8001c2c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fe fb90 	bl	8001c2c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0b5      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351e:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1ee      	bne.n	8003508 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800352a:	7dfb      	ldrb	r3, [r7, #23]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d105      	bne.n	800353c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	4a38      	ldr	r2, [pc, #224]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800353a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80a1 	beq.w	8003688 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003546:	4b34      	ldr	r3, [pc, #208]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b08      	cmp	r3, #8
 8003550:	d05c      	beq.n	800360c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	2b02      	cmp	r3, #2
 8003558:	d141      	bne.n	80035de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355a:	4b31      	ldr	r3, [pc, #196]	; (8003620 <HAL_RCC_OscConfig+0x478>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003560:	f7fe fb64 	bl	8001c2c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003568:	f7fe fb60 	bl	8001c2c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e087      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	019b      	lsls	r3, r3, #6
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	061b      	lsls	r3, r3, #24
 80035aa:	491b      	ldr	r1, [pc, #108]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x478>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b6:	f7fe fb39 	bl	8001c2c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035be:	f7fe fb35 	bl	8001c2c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e05c      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	4b11      	ldr	r3, [pc, #68]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x416>
 80035dc:	e054      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <HAL_RCC_OscConfig+0x478>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fb22 	bl	8001c2c <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ec:	f7fe fb1e 	bl	8001c2c <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e045      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_RCC_OscConfig+0x470>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d1f0      	bne.n	80035ec <HAL_RCC_OscConfig+0x444>
 800360a:	e03d      	b.n	8003688 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e038      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
 8003618:	40023800 	.word	0x40023800
 800361c:	40007000 	.word	0x40007000
 8003620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003624:	4b1b      	ldr	r3, [pc, #108]	; (8003694 <HAL_RCC_OscConfig+0x4ec>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d028      	beq.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363c:	429a      	cmp	r2, r3
 800363e:	d121      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d11a      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800365a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800365c:	4293      	cmp	r3, r2
 800365e:	d111      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	3b01      	subs	r3, #1
 800366e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d107      	bne.n	8003684 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0cc      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036ac:	4b68      	ldr	r3, [pc, #416]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d90c      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b65      	ldr	r3, [pc, #404]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a52      	ldr	r2, [pc, #328]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800370e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d044      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d119      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d003      	beq.n	8003756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	2b03      	cmp	r3, #3
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003756:	4b3f      	ldr	r3, [pc, #252]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e06f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003766:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e067      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003776:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	4934      	ldr	r1, [pc, #208]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7fe fa50 	bl	8001c2c <HAL_GetTick>
 800378c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003790:	f7fe fa4c 	bl	8001c2c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	; 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e04f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 020c 	and.w	r2, r3, #12
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d1eb      	bne.n	8003790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d20c      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	4313      	orrs	r3, r2
 800381c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	; (8003854 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	; (8003858 <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	; (800385c <HAL_RCC_ClockConfig+0x1c4>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCC_ClockConfig+0x1c8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe f9b0 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023c00 	.word	0x40023c00
 8003854:	40023800 	.word	0x40023800
 8003858:	08005264 	.word	0x08005264
 800385c:	20000000 	.word	0x20000000
 8003860:	20000004 	.word	0x20000004

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003868:	b094      	sub	sp, #80	; 0x50
 800386a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	647b      	str	r3, [r7, #68]	; 0x44
 8003870:	2300      	movs	r3, #0
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003874:	2300      	movs	r3, #0
 8003876:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800387c:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d00d      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x40>
 8003888:	2b08      	cmp	r3, #8
 800388a:	f200 80e1 	bhi.w	8003a50 <HAL_RCC_GetSysClockFreq+0x1ec>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d002      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x34>
 8003892:	2b04      	cmp	r3, #4
 8003894:	d003      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x3a>
 8003896:	e0db      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b73      	ldr	r3, [pc, #460]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x204>)
 800389a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800389c:	e0db      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b73      	ldr	r3, [pc, #460]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x208>)
 80038a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038a2:	e0d8      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b6f      	ldr	r3, [pc, #444]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ae:	4b6d      	ldr	r3, [pc, #436]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d063      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b6a      	ldr	r3, [pc, #424]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	2200      	movs	r2, #0
 80038c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
 80038ce:	2300      	movs	r3, #0
 80038d0:	637b      	str	r3, [r7, #52]	; 0x34
 80038d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80038d6:	4622      	mov	r2, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	f04f 0000 	mov.w	r0, #0
 80038de:	f04f 0100 	mov.w	r1, #0
 80038e2:	0159      	lsls	r1, r3, #5
 80038e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e8:	0150      	lsls	r0, r2, #5
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4621      	mov	r1, r4
 80038f0:	1a51      	subs	r1, r2, r1
 80038f2:	6139      	str	r1, [r7, #16]
 80038f4:	4629      	mov	r1, r5
 80038f6:	eb63 0301 	sbc.w	r3, r3, r1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003908:	4659      	mov	r1, fp
 800390a:	018b      	lsls	r3, r1, #6
 800390c:	4651      	mov	r1, sl
 800390e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003912:	4651      	mov	r1, sl
 8003914:	018a      	lsls	r2, r1, #6
 8003916:	4651      	mov	r1, sl
 8003918:	ebb2 0801 	subs.w	r8, r2, r1
 800391c:	4659      	mov	r1, fp
 800391e:	eb63 0901 	sbc.w	r9, r3, r1
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800392e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003936:	4690      	mov	r8, r2
 8003938:	4699      	mov	r9, r3
 800393a:	4623      	mov	r3, r4
 800393c:	eb18 0303 	adds.w	r3, r8, r3
 8003940:	60bb      	str	r3, [r7, #8]
 8003942:	462b      	mov	r3, r5
 8003944:	eb49 0303 	adc.w	r3, r9, r3
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003956:	4629      	mov	r1, r5
 8003958:	024b      	lsls	r3, r1, #9
 800395a:	4621      	mov	r1, r4
 800395c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003960:	4621      	mov	r1, r4
 8003962:	024a      	lsls	r2, r1, #9
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800396a:	2200      	movs	r2, #0
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
 800396e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003970:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003974:	f7fc fc7c 	bl	8000270 <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4613      	mov	r3, r2
 800397e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003980:	e058      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	099b      	lsrs	r3, r3, #6
 8003988:	2200      	movs	r2, #0
 800398a:	4618      	mov	r0, r3
 800398c:	4611      	mov	r1, r2
 800398e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800399c:	4642      	mov	r2, r8
 800399e:	464b      	mov	r3, r9
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	0159      	lsls	r1, r3, #5
 80039aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039ae:	0150      	lsls	r0, r2, #5
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4641      	mov	r1, r8
 80039b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ba:	4649      	mov	r1, r9
 80039bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039d4:	ebb2 040a 	subs.w	r4, r2, sl
 80039d8:	eb63 050b 	sbc.w	r5, r3, fp
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	00eb      	lsls	r3, r5, #3
 80039e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ea:	00e2      	lsls	r2, r4, #3
 80039ec:	4614      	mov	r4, r2
 80039ee:	461d      	mov	r5, r3
 80039f0:	4643      	mov	r3, r8
 80039f2:	18e3      	adds	r3, r4, r3
 80039f4:	603b      	str	r3, [r7, #0]
 80039f6:	464b      	mov	r3, r9
 80039f8:	eb45 0303 	adc.w	r3, r5, r3
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	f04f 0200 	mov.w	r2, #0
 8003a02:	f04f 0300 	mov.w	r3, #0
 8003a06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	028b      	lsls	r3, r1, #10
 8003a0e:	4621      	mov	r1, r4
 8003a10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a14:	4621      	mov	r1, r4
 8003a16:	028a      	lsls	r2, r1, #10
 8003a18:	4610      	mov	r0, r2
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1e:	2200      	movs	r2, #0
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	61fa      	str	r2, [r7, #28]
 8003a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a28:	f7fc fc22 	bl	8000270 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	f003 0303 	and.w	r3, r3, #3
 8003a3e:	3301      	adds	r3, #1
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3750      	adds	r7, #80	; 0x50
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	00f42400 	.word	0x00f42400
 8003a6c:	007a1200 	.word	0x007a1200

08003a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000000 	.word	0x20000000

08003a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a8c:	f7ff fff0 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	0a9b      	lsrs	r3, r3, #10
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	4903      	ldr	r1, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9e:	5ccb      	ldrb	r3, [r1, r3]
 8003aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	08005274 	.word	0x08005274

08003ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e041      	b.n	8003b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd fefe 	bl	80018d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f000 f9ce 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d001      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e04e      	b.n	8003c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d022      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x80>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b92:	d01d      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x80>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a1f      	ldr	r2, [pc, #124]	; (8003c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x80>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x80>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00e      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x80>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x80>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d004      	beq.n	8003bd0 <HAL_TIM_Base_Start_IT+0x80>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d111      	bne.n	8003bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d010      	beq.n	8003c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0201 	orr.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf2:	e007      	b.n	8003c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	40010000 	.word	0x40010000
 8003c18:	40000400 	.word	0x40000400
 8003c1c:	40000800 	.word	0x40000800
 8003c20:	40000c00 	.word	0x40000c00
 8003c24:	40010400 	.word	0x40010400
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40001800 	.word	0x40001800

08003c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0202 	mvn.w	r2, #2
 8003c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f8ee 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8e0 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f8f1 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d122      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0204 	mvn.w	r2, #4
 8003cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8c4 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e005      	b.n	8003cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8b6 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f8c7 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0208 	mvn.w	r2, #8
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f89a 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f88c 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f89d 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b10      	cmp	r3, #16
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0310 	and.w	r3, r3, #16
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0210 	mvn.w	r2, #16
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f870 	bl	8003e54 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f862 	bl	8003e40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f873 	bl	8003e68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d10e      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d107      	bne.n	8003db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0201 	mvn.w	r2, #1
 8003dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7fd fa66 	bl	8001280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dbe:	2b80      	cmp	r3, #128	; 0x80
 8003dc0:	d10e      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dcc:	2b80      	cmp	r3, #128	; 0x80
 8003dce:	d107      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f97e 	bl	80040dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dea:	2b40      	cmp	r3, #64	; 0x40
 8003dec:	d10e      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d107      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f838 	bl	8003e7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d107      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0220 	mvn.w	r2, #32
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f948 	bl	80040c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d00f      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3c      	ldr	r2, [pc, #240]	; (8003fac <TIM_Base_SetConfig+0x11c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3a      	ldr	r2, [pc, #232]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d027      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	; (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d023      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <TIM_Base_SetConfig+0x11c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a29      	ldr	r2, [pc, #164]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <TIM_Base_SetConfig+0x128>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <TIM_Base_SetConfig+0x134>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <TIM_Base_SetConfig+0x138>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <TIM_Base_SetConfig+0x13c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0xf8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40014800 	.word	0x40014800
 8003fc4:	40001800 	.word	0x40001800
 8003fc8:	40001c00 	.word	0x40001c00
 8003fcc:	40002000 	.word	0x40002000

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e05a      	b.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a21      	ldr	r2, [pc, #132]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d01d      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1b      	ldr	r2, [pc, #108]	; (80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a17      	ldr	r2, [pc, #92]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a15      	ldr	r2, [pc, #84]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10c      	bne.n	800408c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4313      	orrs	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40010400 	.word	0x40010400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40001800 	.word	0x40001800

080040c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <std>:
 80040f0:	2300      	movs	r3, #0
 80040f2:	b510      	push	{r4, lr}
 80040f4:	4604      	mov	r4, r0
 80040f6:	e9c0 3300 	strd	r3, r3, [r0]
 80040fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040fe:	6083      	str	r3, [r0, #8]
 8004100:	8181      	strh	r1, [r0, #12]
 8004102:	6643      	str	r3, [r0, #100]	; 0x64
 8004104:	81c2      	strh	r2, [r0, #14]
 8004106:	6183      	str	r3, [r0, #24]
 8004108:	4619      	mov	r1, r3
 800410a:	2208      	movs	r2, #8
 800410c:	305c      	adds	r0, #92	; 0x5c
 800410e:	f000 fa05 	bl	800451c <memset>
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <std+0x58>)
 8004114:	6263      	str	r3, [r4, #36]	; 0x24
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <std+0x5c>)
 8004118:	62a3      	str	r3, [r4, #40]	; 0x28
 800411a:	4b0d      	ldr	r3, [pc, #52]	; (8004150 <std+0x60>)
 800411c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800411e:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <std+0x64>)
 8004120:	6323      	str	r3, [r4, #48]	; 0x30
 8004122:	4b0d      	ldr	r3, [pc, #52]	; (8004158 <std+0x68>)
 8004124:	6224      	str	r4, [r4, #32]
 8004126:	429c      	cmp	r4, r3
 8004128:	d006      	beq.n	8004138 <std+0x48>
 800412a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800412e:	4294      	cmp	r4, r2
 8004130:	d002      	beq.n	8004138 <std+0x48>
 8004132:	33d0      	adds	r3, #208	; 0xd0
 8004134:	429c      	cmp	r4, r3
 8004136:	d105      	bne.n	8004144 <std+0x54>
 8004138:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800413c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004140:	f000 ba64 	b.w	800460c <__retarget_lock_init_recursive>
 8004144:	bd10      	pop	{r4, pc}
 8004146:	bf00      	nop
 8004148:	0800436d 	.word	0x0800436d
 800414c:	0800438f 	.word	0x0800438f
 8004150:	080043c7 	.word	0x080043c7
 8004154:	080043eb 	.word	0x080043eb
 8004158:	200001d4 	.word	0x200001d4

0800415c <stdio_exit_handler>:
 800415c:	4a02      	ldr	r2, [pc, #8]	; (8004168 <stdio_exit_handler+0xc>)
 800415e:	4903      	ldr	r1, [pc, #12]	; (800416c <stdio_exit_handler+0x10>)
 8004160:	4803      	ldr	r0, [pc, #12]	; (8004170 <stdio_exit_handler+0x14>)
 8004162:	f000 b869 	b.w	8004238 <_fwalk_sglue>
 8004166:	bf00      	nop
 8004168:	2000000c 	.word	0x2000000c
 800416c:	08004ee1 	.word	0x08004ee1
 8004170:	20000018 	.word	0x20000018

08004174 <cleanup_stdio>:
 8004174:	6841      	ldr	r1, [r0, #4]
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <cleanup_stdio+0x34>)
 8004178:	4299      	cmp	r1, r3
 800417a:	b510      	push	{r4, lr}
 800417c:	4604      	mov	r4, r0
 800417e:	d001      	beq.n	8004184 <cleanup_stdio+0x10>
 8004180:	f000 feae 	bl	8004ee0 <_fflush_r>
 8004184:	68a1      	ldr	r1, [r4, #8]
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <cleanup_stdio+0x38>)
 8004188:	4299      	cmp	r1, r3
 800418a:	d002      	beq.n	8004192 <cleanup_stdio+0x1e>
 800418c:	4620      	mov	r0, r4
 800418e:	f000 fea7 	bl	8004ee0 <_fflush_r>
 8004192:	68e1      	ldr	r1, [r4, #12]
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <cleanup_stdio+0x3c>)
 8004196:	4299      	cmp	r1, r3
 8004198:	d004      	beq.n	80041a4 <cleanup_stdio+0x30>
 800419a:	4620      	mov	r0, r4
 800419c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041a0:	f000 be9e 	b.w	8004ee0 <_fflush_r>
 80041a4:	bd10      	pop	{r4, pc}
 80041a6:	bf00      	nop
 80041a8:	200001d4 	.word	0x200001d4
 80041ac:	2000023c 	.word	0x2000023c
 80041b0:	200002a4 	.word	0x200002a4

080041b4 <global_stdio_init.part.0>:
 80041b4:	b510      	push	{r4, lr}
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <global_stdio_init.part.0+0x30>)
 80041b8:	4c0b      	ldr	r4, [pc, #44]	; (80041e8 <global_stdio_init.part.0+0x34>)
 80041ba:	4a0c      	ldr	r2, [pc, #48]	; (80041ec <global_stdio_init.part.0+0x38>)
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	4620      	mov	r0, r4
 80041c0:	2200      	movs	r2, #0
 80041c2:	2104      	movs	r1, #4
 80041c4:	f7ff ff94 	bl	80040f0 <std>
 80041c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80041cc:	2201      	movs	r2, #1
 80041ce:	2109      	movs	r1, #9
 80041d0:	f7ff ff8e 	bl	80040f0 <std>
 80041d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80041d8:	2202      	movs	r2, #2
 80041da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041de:	2112      	movs	r1, #18
 80041e0:	f7ff bf86 	b.w	80040f0 <std>
 80041e4:	2000030c 	.word	0x2000030c
 80041e8:	200001d4 	.word	0x200001d4
 80041ec:	0800415d 	.word	0x0800415d

080041f0 <__sfp_lock_acquire>:
 80041f0:	4801      	ldr	r0, [pc, #4]	; (80041f8 <__sfp_lock_acquire+0x8>)
 80041f2:	f000 ba0c 	b.w	800460e <__retarget_lock_acquire_recursive>
 80041f6:	bf00      	nop
 80041f8:	20000315 	.word	0x20000315

080041fc <__sfp_lock_release>:
 80041fc:	4801      	ldr	r0, [pc, #4]	; (8004204 <__sfp_lock_release+0x8>)
 80041fe:	f000 ba07 	b.w	8004610 <__retarget_lock_release_recursive>
 8004202:	bf00      	nop
 8004204:	20000315 	.word	0x20000315

08004208 <__sinit>:
 8004208:	b510      	push	{r4, lr}
 800420a:	4604      	mov	r4, r0
 800420c:	f7ff fff0 	bl	80041f0 <__sfp_lock_acquire>
 8004210:	6a23      	ldr	r3, [r4, #32]
 8004212:	b11b      	cbz	r3, 800421c <__sinit+0x14>
 8004214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004218:	f7ff bff0 	b.w	80041fc <__sfp_lock_release>
 800421c:	4b04      	ldr	r3, [pc, #16]	; (8004230 <__sinit+0x28>)
 800421e:	6223      	str	r3, [r4, #32]
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <__sinit+0x2c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f5      	bne.n	8004214 <__sinit+0xc>
 8004228:	f7ff ffc4 	bl	80041b4 <global_stdio_init.part.0>
 800422c:	e7f2      	b.n	8004214 <__sinit+0xc>
 800422e:	bf00      	nop
 8004230:	08004175 	.word	0x08004175
 8004234:	2000030c 	.word	0x2000030c

08004238 <_fwalk_sglue>:
 8004238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800423c:	4607      	mov	r7, r0
 800423e:	4688      	mov	r8, r1
 8004240:	4614      	mov	r4, r2
 8004242:	2600      	movs	r6, #0
 8004244:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004248:	f1b9 0901 	subs.w	r9, r9, #1
 800424c:	d505      	bpl.n	800425a <_fwalk_sglue+0x22>
 800424e:	6824      	ldr	r4, [r4, #0]
 8004250:	2c00      	cmp	r4, #0
 8004252:	d1f7      	bne.n	8004244 <_fwalk_sglue+0xc>
 8004254:	4630      	mov	r0, r6
 8004256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800425a:	89ab      	ldrh	r3, [r5, #12]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d907      	bls.n	8004270 <_fwalk_sglue+0x38>
 8004260:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004264:	3301      	adds	r3, #1
 8004266:	d003      	beq.n	8004270 <_fwalk_sglue+0x38>
 8004268:	4629      	mov	r1, r5
 800426a:	4638      	mov	r0, r7
 800426c:	47c0      	blx	r8
 800426e:	4306      	orrs	r6, r0
 8004270:	3568      	adds	r5, #104	; 0x68
 8004272:	e7e9      	b.n	8004248 <_fwalk_sglue+0x10>

08004274 <_puts_r>:
 8004274:	6a03      	ldr	r3, [r0, #32]
 8004276:	b570      	push	{r4, r5, r6, lr}
 8004278:	6884      	ldr	r4, [r0, #8]
 800427a:	4605      	mov	r5, r0
 800427c:	460e      	mov	r6, r1
 800427e:	b90b      	cbnz	r3, 8004284 <_puts_r+0x10>
 8004280:	f7ff ffc2 	bl	8004208 <__sinit>
 8004284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004286:	07db      	lsls	r3, r3, #31
 8004288:	d405      	bmi.n	8004296 <_puts_r+0x22>
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	0598      	lsls	r0, r3, #22
 800428e:	d402      	bmi.n	8004296 <_puts_r+0x22>
 8004290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004292:	f000 f9bc 	bl	800460e <__retarget_lock_acquire_recursive>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	0719      	lsls	r1, r3, #28
 800429a:	d513      	bpl.n	80042c4 <_puts_r+0x50>
 800429c:	6923      	ldr	r3, [r4, #16]
 800429e:	b18b      	cbz	r3, 80042c4 <_puts_r+0x50>
 80042a0:	3e01      	subs	r6, #1
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80042a8:	3b01      	subs	r3, #1
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	b9e9      	cbnz	r1, 80042ea <_puts_r+0x76>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	da2e      	bge.n	8004310 <_puts_r+0x9c>
 80042b2:	4622      	mov	r2, r4
 80042b4:	210a      	movs	r1, #10
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 f89b 	bl	80043f2 <__swbuf_r>
 80042bc:	3001      	adds	r0, #1
 80042be:	d007      	beq.n	80042d0 <_puts_r+0x5c>
 80042c0:	250a      	movs	r5, #10
 80042c2:	e007      	b.n	80042d4 <_puts_r+0x60>
 80042c4:	4621      	mov	r1, r4
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 f8d0 	bl	800446c <__swsetup_r>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d0e7      	beq.n	80042a0 <_puts_r+0x2c>
 80042d0:	f04f 35ff 	mov.w	r5, #4294967295
 80042d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042d6:	07da      	lsls	r2, r3, #31
 80042d8:	d405      	bmi.n	80042e6 <_puts_r+0x72>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	059b      	lsls	r3, r3, #22
 80042de:	d402      	bmi.n	80042e6 <_puts_r+0x72>
 80042e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042e2:	f000 f995 	bl	8004610 <__retarget_lock_release_recursive>
 80042e6:	4628      	mov	r0, r5
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	da04      	bge.n	80042f8 <_puts_r+0x84>
 80042ee:	69a2      	ldr	r2, [r4, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	dc06      	bgt.n	8004302 <_puts_r+0x8e>
 80042f4:	290a      	cmp	r1, #10
 80042f6:	d004      	beq.n	8004302 <_puts_r+0x8e>
 80042f8:	6823      	ldr	r3, [r4, #0]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	6022      	str	r2, [r4, #0]
 80042fe:	7019      	strb	r1, [r3, #0]
 8004300:	e7cf      	b.n	80042a2 <_puts_r+0x2e>
 8004302:	4622      	mov	r2, r4
 8004304:	4628      	mov	r0, r5
 8004306:	f000 f874 	bl	80043f2 <__swbuf_r>
 800430a:	3001      	adds	r0, #1
 800430c:	d1c9      	bne.n	80042a2 <_puts_r+0x2e>
 800430e:	e7df      	b.n	80042d0 <_puts_r+0x5c>
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	250a      	movs	r5, #10
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	6022      	str	r2, [r4, #0]
 8004318:	701d      	strb	r5, [r3, #0]
 800431a:	e7db      	b.n	80042d4 <_puts_r+0x60>

0800431c <puts>:
 800431c:	4b02      	ldr	r3, [pc, #8]	; (8004328 <puts+0xc>)
 800431e:	4601      	mov	r1, r0
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	f7ff bfa7 	b.w	8004274 <_puts_r>
 8004326:	bf00      	nop
 8004328:	20000064 	.word	0x20000064

0800432c <siprintf>:
 800432c:	b40e      	push	{r1, r2, r3}
 800432e:	b500      	push	{lr}
 8004330:	b09c      	sub	sp, #112	; 0x70
 8004332:	ab1d      	add	r3, sp, #116	; 0x74
 8004334:	9002      	str	r0, [sp, #8]
 8004336:	9006      	str	r0, [sp, #24]
 8004338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800433c:	4809      	ldr	r0, [pc, #36]	; (8004364 <siprintf+0x38>)
 800433e:	9107      	str	r1, [sp, #28]
 8004340:	9104      	str	r1, [sp, #16]
 8004342:	4909      	ldr	r1, [pc, #36]	; (8004368 <siprintf+0x3c>)
 8004344:	f853 2b04 	ldr.w	r2, [r3], #4
 8004348:	9105      	str	r1, [sp, #20]
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	a902      	add	r1, sp, #8
 8004350:	f000 fab2 	bl	80048b8 <_svfiprintf_r>
 8004354:	9b02      	ldr	r3, [sp, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	b01c      	add	sp, #112	; 0x70
 800435c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004360:	b003      	add	sp, #12
 8004362:	4770      	bx	lr
 8004364:	20000064 	.word	0x20000064
 8004368:	ffff0208 	.word	0xffff0208

0800436c <__sread>:
 800436c:	b510      	push	{r4, lr}
 800436e:	460c      	mov	r4, r1
 8004370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004374:	f000 f8fc 	bl	8004570 <_read_r>
 8004378:	2800      	cmp	r0, #0
 800437a:	bfab      	itete	ge
 800437c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800437e:	89a3      	ldrhlt	r3, [r4, #12]
 8004380:	181b      	addge	r3, r3, r0
 8004382:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004386:	bfac      	ite	ge
 8004388:	6563      	strge	r3, [r4, #84]	; 0x54
 800438a:	81a3      	strhlt	r3, [r4, #12]
 800438c:	bd10      	pop	{r4, pc}

0800438e <__swrite>:
 800438e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004392:	461f      	mov	r7, r3
 8004394:	898b      	ldrh	r3, [r1, #12]
 8004396:	05db      	lsls	r3, r3, #23
 8004398:	4605      	mov	r5, r0
 800439a:	460c      	mov	r4, r1
 800439c:	4616      	mov	r6, r2
 800439e:	d505      	bpl.n	80043ac <__swrite+0x1e>
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	2302      	movs	r3, #2
 80043a6:	2200      	movs	r2, #0
 80043a8:	f000 f8d0 	bl	800454c <_lseek_r>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	4632      	mov	r2, r6
 80043ba:	463b      	mov	r3, r7
 80043bc:	4628      	mov	r0, r5
 80043be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c2:	f000 b8e7 	b.w	8004594 <_write_r>

080043c6 <__sseek>:
 80043c6:	b510      	push	{r4, lr}
 80043c8:	460c      	mov	r4, r1
 80043ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ce:	f000 f8bd 	bl	800454c <_lseek_r>
 80043d2:	1c43      	adds	r3, r0, #1
 80043d4:	89a3      	ldrh	r3, [r4, #12]
 80043d6:	bf15      	itete	ne
 80043d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80043da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043e2:	81a3      	strheq	r3, [r4, #12]
 80043e4:	bf18      	it	ne
 80043e6:	81a3      	strhne	r3, [r4, #12]
 80043e8:	bd10      	pop	{r4, pc}

080043ea <__sclose>:
 80043ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ee:	f000 b89d 	b.w	800452c <_close_r>

080043f2 <__swbuf_r>:
 80043f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f4:	460e      	mov	r6, r1
 80043f6:	4614      	mov	r4, r2
 80043f8:	4605      	mov	r5, r0
 80043fa:	b118      	cbz	r0, 8004404 <__swbuf_r+0x12>
 80043fc:	6a03      	ldr	r3, [r0, #32]
 80043fe:	b90b      	cbnz	r3, 8004404 <__swbuf_r+0x12>
 8004400:	f7ff ff02 	bl	8004208 <__sinit>
 8004404:	69a3      	ldr	r3, [r4, #24]
 8004406:	60a3      	str	r3, [r4, #8]
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	071a      	lsls	r2, r3, #28
 800440c:	d525      	bpl.n	800445a <__swbuf_r+0x68>
 800440e:	6923      	ldr	r3, [r4, #16]
 8004410:	b31b      	cbz	r3, 800445a <__swbuf_r+0x68>
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	6922      	ldr	r2, [r4, #16]
 8004416:	1a98      	subs	r0, r3, r2
 8004418:	6963      	ldr	r3, [r4, #20]
 800441a:	b2f6      	uxtb	r6, r6
 800441c:	4283      	cmp	r3, r0
 800441e:	4637      	mov	r7, r6
 8004420:	dc04      	bgt.n	800442c <__swbuf_r+0x3a>
 8004422:	4621      	mov	r1, r4
 8004424:	4628      	mov	r0, r5
 8004426:	f000 fd5b 	bl	8004ee0 <_fflush_r>
 800442a:	b9e0      	cbnz	r0, 8004466 <__swbuf_r+0x74>
 800442c:	68a3      	ldr	r3, [r4, #8]
 800442e:	3b01      	subs	r3, #1
 8004430:	60a3      	str	r3, [r4, #8]
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	6022      	str	r2, [r4, #0]
 8004438:	701e      	strb	r6, [r3, #0]
 800443a:	6962      	ldr	r2, [r4, #20]
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	429a      	cmp	r2, r3
 8004440:	d004      	beq.n	800444c <__swbuf_r+0x5a>
 8004442:	89a3      	ldrh	r3, [r4, #12]
 8004444:	07db      	lsls	r3, r3, #31
 8004446:	d506      	bpl.n	8004456 <__swbuf_r+0x64>
 8004448:	2e0a      	cmp	r6, #10
 800444a:	d104      	bne.n	8004456 <__swbuf_r+0x64>
 800444c:	4621      	mov	r1, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 fd46 	bl	8004ee0 <_fflush_r>
 8004454:	b938      	cbnz	r0, 8004466 <__swbuf_r+0x74>
 8004456:	4638      	mov	r0, r7
 8004458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800445a:	4621      	mov	r1, r4
 800445c:	4628      	mov	r0, r5
 800445e:	f000 f805 	bl	800446c <__swsetup_r>
 8004462:	2800      	cmp	r0, #0
 8004464:	d0d5      	beq.n	8004412 <__swbuf_r+0x20>
 8004466:	f04f 37ff 	mov.w	r7, #4294967295
 800446a:	e7f4      	b.n	8004456 <__swbuf_r+0x64>

0800446c <__swsetup_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4b2a      	ldr	r3, [pc, #168]	; (8004518 <__swsetup_r+0xac>)
 8004470:	4605      	mov	r5, r0
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	460c      	mov	r4, r1
 8004476:	b118      	cbz	r0, 8004480 <__swsetup_r+0x14>
 8004478:	6a03      	ldr	r3, [r0, #32]
 800447a:	b90b      	cbnz	r3, 8004480 <__swsetup_r+0x14>
 800447c:	f7ff fec4 	bl	8004208 <__sinit>
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004486:	0718      	lsls	r0, r3, #28
 8004488:	d422      	bmi.n	80044d0 <__swsetup_r+0x64>
 800448a:	06d9      	lsls	r1, r3, #27
 800448c:	d407      	bmi.n	800449e <__swsetup_r+0x32>
 800448e:	2309      	movs	r3, #9
 8004490:	602b      	str	r3, [r5, #0]
 8004492:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004496:	81a3      	strh	r3, [r4, #12]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	e034      	b.n	8004508 <__swsetup_r+0x9c>
 800449e:	0758      	lsls	r0, r3, #29
 80044a0:	d512      	bpl.n	80044c8 <__swsetup_r+0x5c>
 80044a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044a4:	b141      	cbz	r1, 80044b8 <__swsetup_r+0x4c>
 80044a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044aa:	4299      	cmp	r1, r3
 80044ac:	d002      	beq.n	80044b4 <__swsetup_r+0x48>
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 f8b0 	bl	8004614 <_free_r>
 80044b4:	2300      	movs	r3, #0
 80044b6:	6363      	str	r3, [r4, #52]	; 0x34
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044be:	81a3      	strh	r3, [r4, #12]
 80044c0:	2300      	movs	r3, #0
 80044c2:	6063      	str	r3, [r4, #4]
 80044c4:	6923      	ldr	r3, [r4, #16]
 80044c6:	6023      	str	r3, [r4, #0]
 80044c8:	89a3      	ldrh	r3, [r4, #12]
 80044ca:	f043 0308 	orr.w	r3, r3, #8
 80044ce:	81a3      	strh	r3, [r4, #12]
 80044d0:	6923      	ldr	r3, [r4, #16]
 80044d2:	b94b      	cbnz	r3, 80044e8 <__swsetup_r+0x7c>
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044de:	d003      	beq.n	80044e8 <__swsetup_r+0x7c>
 80044e0:	4621      	mov	r1, r4
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 fd4a 	bl	8004f7c <__smakebuf_r>
 80044e8:	89a0      	ldrh	r0, [r4, #12]
 80044ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80044ee:	f010 0301 	ands.w	r3, r0, #1
 80044f2:	d00a      	beq.n	800450a <__swsetup_r+0x9e>
 80044f4:	2300      	movs	r3, #0
 80044f6:	60a3      	str	r3, [r4, #8]
 80044f8:	6963      	ldr	r3, [r4, #20]
 80044fa:	425b      	negs	r3, r3
 80044fc:	61a3      	str	r3, [r4, #24]
 80044fe:	6923      	ldr	r3, [r4, #16]
 8004500:	b943      	cbnz	r3, 8004514 <__swsetup_r+0xa8>
 8004502:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004506:	d1c4      	bne.n	8004492 <__swsetup_r+0x26>
 8004508:	bd38      	pop	{r3, r4, r5, pc}
 800450a:	0781      	lsls	r1, r0, #30
 800450c:	bf58      	it	pl
 800450e:	6963      	ldrpl	r3, [r4, #20]
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	e7f4      	b.n	80044fe <__swsetup_r+0x92>
 8004514:	2000      	movs	r0, #0
 8004516:	e7f7      	b.n	8004508 <__swsetup_r+0x9c>
 8004518:	20000064 	.word	0x20000064

0800451c <memset>:
 800451c:	4402      	add	r2, r0
 800451e:	4603      	mov	r3, r0
 8004520:	4293      	cmp	r3, r2
 8004522:	d100      	bne.n	8004526 <memset+0xa>
 8004524:	4770      	bx	lr
 8004526:	f803 1b01 	strb.w	r1, [r3], #1
 800452a:	e7f9      	b.n	8004520 <memset+0x4>

0800452c <_close_r>:
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	4d06      	ldr	r5, [pc, #24]	; (8004548 <_close_r+0x1c>)
 8004530:	2300      	movs	r3, #0
 8004532:	4604      	mov	r4, r0
 8004534:	4608      	mov	r0, r1
 8004536:	602b      	str	r3, [r5, #0]
 8004538:	f7fd fa6b 	bl	8001a12 <_close>
 800453c:	1c43      	adds	r3, r0, #1
 800453e:	d102      	bne.n	8004546 <_close_r+0x1a>
 8004540:	682b      	ldr	r3, [r5, #0]
 8004542:	b103      	cbz	r3, 8004546 <_close_r+0x1a>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	bd38      	pop	{r3, r4, r5, pc}
 8004548:	20000310 	.word	0x20000310

0800454c <_lseek_r>:
 800454c:	b538      	push	{r3, r4, r5, lr}
 800454e:	4d07      	ldr	r5, [pc, #28]	; (800456c <_lseek_r+0x20>)
 8004550:	4604      	mov	r4, r0
 8004552:	4608      	mov	r0, r1
 8004554:	4611      	mov	r1, r2
 8004556:	2200      	movs	r2, #0
 8004558:	602a      	str	r2, [r5, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	f7fd fa80 	bl	8001a60 <_lseek>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_lseek_r+0x1e>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_lseek_r+0x1e>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	20000310 	.word	0x20000310

08004570 <_read_r>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	4d07      	ldr	r5, [pc, #28]	; (8004590 <_read_r+0x20>)
 8004574:	4604      	mov	r4, r0
 8004576:	4608      	mov	r0, r1
 8004578:	4611      	mov	r1, r2
 800457a:	2200      	movs	r2, #0
 800457c:	602a      	str	r2, [r5, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	f7fd fa0e 	bl	80019a0 <_read>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	d102      	bne.n	800458e <_read_r+0x1e>
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	b103      	cbz	r3, 800458e <_read_r+0x1e>
 800458c:	6023      	str	r3, [r4, #0]
 800458e:	bd38      	pop	{r3, r4, r5, pc}
 8004590:	20000310 	.word	0x20000310

08004594 <_write_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4d07      	ldr	r5, [pc, #28]	; (80045b4 <_write_r+0x20>)
 8004598:	4604      	mov	r4, r0
 800459a:	4608      	mov	r0, r1
 800459c:	4611      	mov	r1, r2
 800459e:	2200      	movs	r2, #0
 80045a0:	602a      	str	r2, [r5, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	f7fd fa19 	bl	80019da <_write>
 80045a8:	1c43      	adds	r3, r0, #1
 80045aa:	d102      	bne.n	80045b2 <_write_r+0x1e>
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	b103      	cbz	r3, 80045b2 <_write_r+0x1e>
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	bd38      	pop	{r3, r4, r5, pc}
 80045b4:	20000310 	.word	0x20000310

080045b8 <__errno>:
 80045b8:	4b01      	ldr	r3, [pc, #4]	; (80045c0 <__errno+0x8>)
 80045ba:	6818      	ldr	r0, [r3, #0]
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000064 	.word	0x20000064

080045c4 <__libc_init_array>:
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4d0d      	ldr	r5, [pc, #52]	; (80045fc <__libc_init_array+0x38>)
 80045c8:	4c0d      	ldr	r4, [pc, #52]	; (8004600 <__libc_init_array+0x3c>)
 80045ca:	1b64      	subs	r4, r4, r5
 80045cc:	10a4      	asrs	r4, r4, #2
 80045ce:	2600      	movs	r6, #0
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	d109      	bne.n	80045e8 <__libc_init_array+0x24>
 80045d4:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <__libc_init_array+0x40>)
 80045d6:	4c0c      	ldr	r4, [pc, #48]	; (8004608 <__libc_init_array+0x44>)
 80045d8:	f000 fd9e 	bl	8005118 <_init>
 80045dc:	1b64      	subs	r4, r4, r5
 80045de:	10a4      	asrs	r4, r4, #2
 80045e0:	2600      	movs	r6, #0
 80045e2:	42a6      	cmp	r6, r4
 80045e4:	d105      	bne.n	80045f2 <__libc_init_array+0x2e>
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
 80045e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ec:	4798      	blx	r3
 80045ee:	3601      	adds	r6, #1
 80045f0:	e7ee      	b.n	80045d0 <__libc_init_array+0xc>
 80045f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f6:	4798      	blx	r3
 80045f8:	3601      	adds	r6, #1
 80045fa:	e7f2      	b.n	80045e2 <__libc_init_array+0x1e>
 80045fc:	080052b8 	.word	0x080052b8
 8004600:	080052b8 	.word	0x080052b8
 8004604:	080052b8 	.word	0x080052b8
 8004608:	080052bc 	.word	0x080052bc

0800460c <__retarget_lock_init_recursive>:
 800460c:	4770      	bx	lr

0800460e <__retarget_lock_acquire_recursive>:
 800460e:	4770      	bx	lr

08004610 <__retarget_lock_release_recursive>:
 8004610:	4770      	bx	lr
	...

08004614 <_free_r>:
 8004614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004616:	2900      	cmp	r1, #0
 8004618:	d044      	beq.n	80046a4 <_free_r+0x90>
 800461a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800461e:	9001      	str	r0, [sp, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f1a1 0404 	sub.w	r4, r1, #4
 8004626:	bfb8      	it	lt
 8004628:	18e4      	addlt	r4, r4, r3
 800462a:	f000 f8df 	bl	80047ec <__malloc_lock>
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <_free_r+0x94>)
 8004630:	9801      	ldr	r0, [sp, #4]
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	b933      	cbnz	r3, 8004644 <_free_r+0x30>
 8004636:	6063      	str	r3, [r4, #4]
 8004638:	6014      	str	r4, [r2, #0]
 800463a:	b003      	add	sp, #12
 800463c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004640:	f000 b8da 	b.w	80047f8 <__malloc_unlock>
 8004644:	42a3      	cmp	r3, r4
 8004646:	d908      	bls.n	800465a <_free_r+0x46>
 8004648:	6825      	ldr	r5, [r4, #0]
 800464a:	1961      	adds	r1, r4, r5
 800464c:	428b      	cmp	r3, r1
 800464e:	bf01      	itttt	eq
 8004650:	6819      	ldreq	r1, [r3, #0]
 8004652:	685b      	ldreq	r3, [r3, #4]
 8004654:	1949      	addeq	r1, r1, r5
 8004656:	6021      	streq	r1, [r4, #0]
 8004658:	e7ed      	b.n	8004636 <_free_r+0x22>
 800465a:	461a      	mov	r2, r3
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	b10b      	cbz	r3, 8004664 <_free_r+0x50>
 8004660:	42a3      	cmp	r3, r4
 8004662:	d9fa      	bls.n	800465a <_free_r+0x46>
 8004664:	6811      	ldr	r1, [r2, #0]
 8004666:	1855      	adds	r5, r2, r1
 8004668:	42a5      	cmp	r5, r4
 800466a:	d10b      	bne.n	8004684 <_free_r+0x70>
 800466c:	6824      	ldr	r4, [r4, #0]
 800466e:	4421      	add	r1, r4
 8004670:	1854      	adds	r4, r2, r1
 8004672:	42a3      	cmp	r3, r4
 8004674:	6011      	str	r1, [r2, #0]
 8004676:	d1e0      	bne.n	800463a <_free_r+0x26>
 8004678:	681c      	ldr	r4, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	6053      	str	r3, [r2, #4]
 800467e:	440c      	add	r4, r1
 8004680:	6014      	str	r4, [r2, #0]
 8004682:	e7da      	b.n	800463a <_free_r+0x26>
 8004684:	d902      	bls.n	800468c <_free_r+0x78>
 8004686:	230c      	movs	r3, #12
 8004688:	6003      	str	r3, [r0, #0]
 800468a:	e7d6      	b.n	800463a <_free_r+0x26>
 800468c:	6825      	ldr	r5, [r4, #0]
 800468e:	1961      	adds	r1, r4, r5
 8004690:	428b      	cmp	r3, r1
 8004692:	bf04      	itt	eq
 8004694:	6819      	ldreq	r1, [r3, #0]
 8004696:	685b      	ldreq	r3, [r3, #4]
 8004698:	6063      	str	r3, [r4, #4]
 800469a:	bf04      	itt	eq
 800469c:	1949      	addeq	r1, r1, r5
 800469e:	6021      	streq	r1, [r4, #0]
 80046a0:	6054      	str	r4, [r2, #4]
 80046a2:	e7ca      	b.n	800463a <_free_r+0x26>
 80046a4:	b003      	add	sp, #12
 80046a6:	bd30      	pop	{r4, r5, pc}
 80046a8:	20000318 	.word	0x20000318

080046ac <sbrk_aligned>:
 80046ac:	b570      	push	{r4, r5, r6, lr}
 80046ae:	4e0e      	ldr	r6, [pc, #56]	; (80046e8 <sbrk_aligned+0x3c>)
 80046b0:	460c      	mov	r4, r1
 80046b2:	6831      	ldr	r1, [r6, #0]
 80046b4:	4605      	mov	r5, r0
 80046b6:	b911      	cbnz	r1, 80046be <sbrk_aligned+0x12>
 80046b8:	f000 fcd8 	bl	800506c <_sbrk_r>
 80046bc:	6030      	str	r0, [r6, #0]
 80046be:	4621      	mov	r1, r4
 80046c0:	4628      	mov	r0, r5
 80046c2:	f000 fcd3 	bl	800506c <_sbrk_r>
 80046c6:	1c43      	adds	r3, r0, #1
 80046c8:	d00a      	beq.n	80046e0 <sbrk_aligned+0x34>
 80046ca:	1cc4      	adds	r4, r0, #3
 80046cc:	f024 0403 	bic.w	r4, r4, #3
 80046d0:	42a0      	cmp	r0, r4
 80046d2:	d007      	beq.n	80046e4 <sbrk_aligned+0x38>
 80046d4:	1a21      	subs	r1, r4, r0
 80046d6:	4628      	mov	r0, r5
 80046d8:	f000 fcc8 	bl	800506c <_sbrk_r>
 80046dc:	3001      	adds	r0, #1
 80046de:	d101      	bne.n	80046e4 <sbrk_aligned+0x38>
 80046e0:	f04f 34ff 	mov.w	r4, #4294967295
 80046e4:	4620      	mov	r0, r4
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	2000031c 	.word	0x2000031c

080046ec <_malloc_r>:
 80046ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046f0:	1ccd      	adds	r5, r1, #3
 80046f2:	f025 0503 	bic.w	r5, r5, #3
 80046f6:	3508      	adds	r5, #8
 80046f8:	2d0c      	cmp	r5, #12
 80046fa:	bf38      	it	cc
 80046fc:	250c      	movcc	r5, #12
 80046fe:	2d00      	cmp	r5, #0
 8004700:	4607      	mov	r7, r0
 8004702:	db01      	blt.n	8004708 <_malloc_r+0x1c>
 8004704:	42a9      	cmp	r1, r5
 8004706:	d905      	bls.n	8004714 <_malloc_r+0x28>
 8004708:	230c      	movs	r3, #12
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	2600      	movs	r6, #0
 800470e:	4630      	mov	r0, r6
 8004710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004714:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80047e8 <_malloc_r+0xfc>
 8004718:	f000 f868 	bl	80047ec <__malloc_lock>
 800471c:	f8d8 3000 	ldr.w	r3, [r8]
 8004720:	461c      	mov	r4, r3
 8004722:	bb5c      	cbnz	r4, 800477c <_malloc_r+0x90>
 8004724:	4629      	mov	r1, r5
 8004726:	4638      	mov	r0, r7
 8004728:	f7ff ffc0 	bl	80046ac <sbrk_aligned>
 800472c:	1c43      	adds	r3, r0, #1
 800472e:	4604      	mov	r4, r0
 8004730:	d155      	bne.n	80047de <_malloc_r+0xf2>
 8004732:	f8d8 4000 	ldr.w	r4, [r8]
 8004736:	4626      	mov	r6, r4
 8004738:	2e00      	cmp	r6, #0
 800473a:	d145      	bne.n	80047c8 <_malloc_r+0xdc>
 800473c:	2c00      	cmp	r4, #0
 800473e:	d048      	beq.n	80047d2 <_malloc_r+0xe6>
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	4631      	mov	r1, r6
 8004744:	4638      	mov	r0, r7
 8004746:	eb04 0903 	add.w	r9, r4, r3
 800474a:	f000 fc8f 	bl	800506c <_sbrk_r>
 800474e:	4581      	cmp	r9, r0
 8004750:	d13f      	bne.n	80047d2 <_malloc_r+0xe6>
 8004752:	6821      	ldr	r1, [r4, #0]
 8004754:	1a6d      	subs	r5, r5, r1
 8004756:	4629      	mov	r1, r5
 8004758:	4638      	mov	r0, r7
 800475a:	f7ff ffa7 	bl	80046ac <sbrk_aligned>
 800475e:	3001      	adds	r0, #1
 8004760:	d037      	beq.n	80047d2 <_malloc_r+0xe6>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	442b      	add	r3, r5
 8004766:	6023      	str	r3, [r4, #0]
 8004768:	f8d8 3000 	ldr.w	r3, [r8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d038      	beq.n	80047e2 <_malloc_r+0xf6>
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	42a2      	cmp	r2, r4
 8004774:	d12b      	bne.n	80047ce <_malloc_r+0xe2>
 8004776:	2200      	movs	r2, #0
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	e00f      	b.n	800479c <_malloc_r+0xb0>
 800477c:	6822      	ldr	r2, [r4, #0]
 800477e:	1b52      	subs	r2, r2, r5
 8004780:	d41f      	bmi.n	80047c2 <_malloc_r+0xd6>
 8004782:	2a0b      	cmp	r2, #11
 8004784:	d917      	bls.n	80047b6 <_malloc_r+0xca>
 8004786:	1961      	adds	r1, r4, r5
 8004788:	42a3      	cmp	r3, r4
 800478a:	6025      	str	r5, [r4, #0]
 800478c:	bf18      	it	ne
 800478e:	6059      	strne	r1, [r3, #4]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	bf08      	it	eq
 8004794:	f8c8 1000 	streq.w	r1, [r8]
 8004798:	5162      	str	r2, [r4, r5]
 800479a:	604b      	str	r3, [r1, #4]
 800479c:	4638      	mov	r0, r7
 800479e:	f104 060b 	add.w	r6, r4, #11
 80047a2:	f000 f829 	bl	80047f8 <__malloc_unlock>
 80047a6:	f026 0607 	bic.w	r6, r6, #7
 80047aa:	1d23      	adds	r3, r4, #4
 80047ac:	1af2      	subs	r2, r6, r3
 80047ae:	d0ae      	beq.n	800470e <_malloc_r+0x22>
 80047b0:	1b9b      	subs	r3, r3, r6
 80047b2:	50a3      	str	r3, [r4, r2]
 80047b4:	e7ab      	b.n	800470e <_malloc_r+0x22>
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	6862      	ldr	r2, [r4, #4]
 80047ba:	d1dd      	bne.n	8004778 <_malloc_r+0x8c>
 80047bc:	f8c8 2000 	str.w	r2, [r8]
 80047c0:	e7ec      	b.n	800479c <_malloc_r+0xb0>
 80047c2:	4623      	mov	r3, r4
 80047c4:	6864      	ldr	r4, [r4, #4]
 80047c6:	e7ac      	b.n	8004722 <_malloc_r+0x36>
 80047c8:	4634      	mov	r4, r6
 80047ca:	6876      	ldr	r6, [r6, #4]
 80047cc:	e7b4      	b.n	8004738 <_malloc_r+0x4c>
 80047ce:	4613      	mov	r3, r2
 80047d0:	e7cc      	b.n	800476c <_malloc_r+0x80>
 80047d2:	230c      	movs	r3, #12
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	4638      	mov	r0, r7
 80047d8:	f000 f80e 	bl	80047f8 <__malloc_unlock>
 80047dc:	e797      	b.n	800470e <_malloc_r+0x22>
 80047de:	6025      	str	r5, [r4, #0]
 80047e0:	e7dc      	b.n	800479c <_malloc_r+0xb0>
 80047e2:	605b      	str	r3, [r3, #4]
 80047e4:	deff      	udf	#255	; 0xff
 80047e6:	bf00      	nop
 80047e8:	20000318 	.word	0x20000318

080047ec <__malloc_lock>:
 80047ec:	4801      	ldr	r0, [pc, #4]	; (80047f4 <__malloc_lock+0x8>)
 80047ee:	f7ff bf0e 	b.w	800460e <__retarget_lock_acquire_recursive>
 80047f2:	bf00      	nop
 80047f4:	20000314 	.word	0x20000314

080047f8 <__malloc_unlock>:
 80047f8:	4801      	ldr	r0, [pc, #4]	; (8004800 <__malloc_unlock+0x8>)
 80047fa:	f7ff bf09 	b.w	8004610 <__retarget_lock_release_recursive>
 80047fe:	bf00      	nop
 8004800:	20000314 	.word	0x20000314

08004804 <__ssputs_r>:
 8004804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004808:	688e      	ldr	r6, [r1, #8]
 800480a:	461f      	mov	r7, r3
 800480c:	42be      	cmp	r6, r7
 800480e:	680b      	ldr	r3, [r1, #0]
 8004810:	4682      	mov	sl, r0
 8004812:	460c      	mov	r4, r1
 8004814:	4690      	mov	r8, r2
 8004816:	d82c      	bhi.n	8004872 <__ssputs_r+0x6e>
 8004818:	898a      	ldrh	r2, [r1, #12]
 800481a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800481e:	d026      	beq.n	800486e <__ssputs_r+0x6a>
 8004820:	6965      	ldr	r5, [r4, #20]
 8004822:	6909      	ldr	r1, [r1, #16]
 8004824:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004828:	eba3 0901 	sub.w	r9, r3, r1
 800482c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004830:	1c7b      	adds	r3, r7, #1
 8004832:	444b      	add	r3, r9
 8004834:	106d      	asrs	r5, r5, #1
 8004836:	429d      	cmp	r5, r3
 8004838:	bf38      	it	cc
 800483a:	461d      	movcc	r5, r3
 800483c:	0553      	lsls	r3, r2, #21
 800483e:	d527      	bpl.n	8004890 <__ssputs_r+0x8c>
 8004840:	4629      	mov	r1, r5
 8004842:	f7ff ff53 	bl	80046ec <_malloc_r>
 8004846:	4606      	mov	r6, r0
 8004848:	b360      	cbz	r0, 80048a4 <__ssputs_r+0xa0>
 800484a:	6921      	ldr	r1, [r4, #16]
 800484c:	464a      	mov	r2, r9
 800484e:	f000 fc1d 	bl	800508c <memcpy>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485c:	81a3      	strh	r3, [r4, #12]
 800485e:	6126      	str	r6, [r4, #16]
 8004860:	6165      	str	r5, [r4, #20]
 8004862:	444e      	add	r6, r9
 8004864:	eba5 0509 	sub.w	r5, r5, r9
 8004868:	6026      	str	r6, [r4, #0]
 800486a:	60a5      	str	r5, [r4, #8]
 800486c:	463e      	mov	r6, r7
 800486e:	42be      	cmp	r6, r7
 8004870:	d900      	bls.n	8004874 <__ssputs_r+0x70>
 8004872:	463e      	mov	r6, r7
 8004874:	6820      	ldr	r0, [r4, #0]
 8004876:	4632      	mov	r2, r6
 8004878:	4641      	mov	r1, r8
 800487a:	f000 fbbb 	bl	8004ff4 <memmove>
 800487e:	68a3      	ldr	r3, [r4, #8]
 8004880:	1b9b      	subs	r3, r3, r6
 8004882:	60a3      	str	r3, [r4, #8]
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	4433      	add	r3, r6
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	2000      	movs	r0, #0
 800488c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004890:	462a      	mov	r2, r5
 8004892:	f000 fc09 	bl	80050a8 <_realloc_r>
 8004896:	4606      	mov	r6, r0
 8004898:	2800      	cmp	r0, #0
 800489a:	d1e0      	bne.n	800485e <__ssputs_r+0x5a>
 800489c:	6921      	ldr	r1, [r4, #16]
 800489e:	4650      	mov	r0, sl
 80048a0:	f7ff feb8 	bl	8004614 <_free_r>
 80048a4:	230c      	movs	r3, #12
 80048a6:	f8ca 3000 	str.w	r3, [sl]
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	f04f 30ff 	mov.w	r0, #4294967295
 80048b6:	e7e9      	b.n	800488c <__ssputs_r+0x88>

080048b8 <_svfiprintf_r>:
 80048b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048bc:	4698      	mov	r8, r3
 80048be:	898b      	ldrh	r3, [r1, #12]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	b09d      	sub	sp, #116	; 0x74
 80048c4:	4607      	mov	r7, r0
 80048c6:	460d      	mov	r5, r1
 80048c8:	4614      	mov	r4, r2
 80048ca:	d50e      	bpl.n	80048ea <_svfiprintf_r+0x32>
 80048cc:	690b      	ldr	r3, [r1, #16]
 80048ce:	b963      	cbnz	r3, 80048ea <_svfiprintf_r+0x32>
 80048d0:	2140      	movs	r1, #64	; 0x40
 80048d2:	f7ff ff0b 	bl	80046ec <_malloc_r>
 80048d6:	6028      	str	r0, [r5, #0]
 80048d8:	6128      	str	r0, [r5, #16]
 80048da:	b920      	cbnz	r0, 80048e6 <_svfiprintf_r+0x2e>
 80048dc:	230c      	movs	r3, #12
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295
 80048e4:	e0d0      	b.n	8004a88 <_svfiprintf_r+0x1d0>
 80048e6:	2340      	movs	r3, #64	; 0x40
 80048e8:	616b      	str	r3, [r5, #20]
 80048ea:	2300      	movs	r3, #0
 80048ec:	9309      	str	r3, [sp, #36]	; 0x24
 80048ee:	2320      	movs	r3, #32
 80048f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048f8:	2330      	movs	r3, #48	; 0x30
 80048fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004aa0 <_svfiprintf_r+0x1e8>
 80048fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004902:	f04f 0901 	mov.w	r9, #1
 8004906:	4623      	mov	r3, r4
 8004908:	469a      	mov	sl, r3
 800490a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800490e:	b10a      	cbz	r2, 8004914 <_svfiprintf_r+0x5c>
 8004910:	2a25      	cmp	r2, #37	; 0x25
 8004912:	d1f9      	bne.n	8004908 <_svfiprintf_r+0x50>
 8004914:	ebba 0b04 	subs.w	fp, sl, r4
 8004918:	d00b      	beq.n	8004932 <_svfiprintf_r+0x7a>
 800491a:	465b      	mov	r3, fp
 800491c:	4622      	mov	r2, r4
 800491e:	4629      	mov	r1, r5
 8004920:	4638      	mov	r0, r7
 8004922:	f7ff ff6f 	bl	8004804 <__ssputs_r>
 8004926:	3001      	adds	r0, #1
 8004928:	f000 80a9 	beq.w	8004a7e <_svfiprintf_r+0x1c6>
 800492c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800492e:	445a      	add	r2, fp
 8004930:	9209      	str	r2, [sp, #36]	; 0x24
 8004932:	f89a 3000 	ldrb.w	r3, [sl]
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 80a1 	beq.w	8004a7e <_svfiprintf_r+0x1c6>
 800493c:	2300      	movs	r3, #0
 800493e:	f04f 32ff 	mov.w	r2, #4294967295
 8004942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004946:	f10a 0a01 	add.w	sl, sl, #1
 800494a:	9304      	str	r3, [sp, #16]
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004952:	931a      	str	r3, [sp, #104]	; 0x68
 8004954:	4654      	mov	r4, sl
 8004956:	2205      	movs	r2, #5
 8004958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800495c:	4850      	ldr	r0, [pc, #320]	; (8004aa0 <_svfiprintf_r+0x1e8>)
 800495e:	f7fb fc37 	bl	80001d0 <memchr>
 8004962:	9a04      	ldr	r2, [sp, #16]
 8004964:	b9d8      	cbnz	r0, 800499e <_svfiprintf_r+0xe6>
 8004966:	06d0      	lsls	r0, r2, #27
 8004968:	bf44      	itt	mi
 800496a:	2320      	movmi	r3, #32
 800496c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004970:	0711      	lsls	r1, r2, #28
 8004972:	bf44      	itt	mi
 8004974:	232b      	movmi	r3, #43	; 0x2b
 8004976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800497a:	f89a 3000 	ldrb.w	r3, [sl]
 800497e:	2b2a      	cmp	r3, #42	; 0x2a
 8004980:	d015      	beq.n	80049ae <_svfiprintf_r+0xf6>
 8004982:	9a07      	ldr	r2, [sp, #28]
 8004984:	4654      	mov	r4, sl
 8004986:	2000      	movs	r0, #0
 8004988:	f04f 0c0a 	mov.w	ip, #10
 800498c:	4621      	mov	r1, r4
 800498e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004992:	3b30      	subs	r3, #48	; 0x30
 8004994:	2b09      	cmp	r3, #9
 8004996:	d94d      	bls.n	8004a34 <_svfiprintf_r+0x17c>
 8004998:	b1b0      	cbz	r0, 80049c8 <_svfiprintf_r+0x110>
 800499a:	9207      	str	r2, [sp, #28]
 800499c:	e014      	b.n	80049c8 <_svfiprintf_r+0x110>
 800499e:	eba0 0308 	sub.w	r3, r0, r8
 80049a2:	fa09 f303 	lsl.w	r3, r9, r3
 80049a6:	4313      	orrs	r3, r2
 80049a8:	9304      	str	r3, [sp, #16]
 80049aa:	46a2      	mov	sl, r4
 80049ac:	e7d2      	b.n	8004954 <_svfiprintf_r+0x9c>
 80049ae:	9b03      	ldr	r3, [sp, #12]
 80049b0:	1d19      	adds	r1, r3, #4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	9103      	str	r1, [sp, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	bfbb      	ittet	lt
 80049ba:	425b      	neglt	r3, r3
 80049bc:	f042 0202 	orrlt.w	r2, r2, #2
 80049c0:	9307      	strge	r3, [sp, #28]
 80049c2:	9307      	strlt	r3, [sp, #28]
 80049c4:	bfb8      	it	lt
 80049c6:	9204      	strlt	r2, [sp, #16]
 80049c8:	7823      	ldrb	r3, [r4, #0]
 80049ca:	2b2e      	cmp	r3, #46	; 0x2e
 80049cc:	d10c      	bne.n	80049e8 <_svfiprintf_r+0x130>
 80049ce:	7863      	ldrb	r3, [r4, #1]
 80049d0:	2b2a      	cmp	r3, #42	; 0x2a
 80049d2:	d134      	bne.n	8004a3e <_svfiprintf_r+0x186>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	1d1a      	adds	r2, r3, #4
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	9203      	str	r2, [sp, #12]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	bfb8      	it	lt
 80049e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80049e4:	3402      	adds	r4, #2
 80049e6:	9305      	str	r3, [sp, #20]
 80049e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ab0 <_svfiprintf_r+0x1f8>
 80049ec:	7821      	ldrb	r1, [r4, #0]
 80049ee:	2203      	movs	r2, #3
 80049f0:	4650      	mov	r0, sl
 80049f2:	f7fb fbed 	bl	80001d0 <memchr>
 80049f6:	b138      	cbz	r0, 8004a08 <_svfiprintf_r+0x150>
 80049f8:	9b04      	ldr	r3, [sp, #16]
 80049fa:	eba0 000a 	sub.w	r0, r0, sl
 80049fe:	2240      	movs	r2, #64	; 0x40
 8004a00:	4082      	lsls	r2, r0
 8004a02:	4313      	orrs	r3, r2
 8004a04:	3401      	adds	r4, #1
 8004a06:	9304      	str	r3, [sp, #16]
 8004a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a0c:	4825      	ldr	r0, [pc, #148]	; (8004aa4 <_svfiprintf_r+0x1ec>)
 8004a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a12:	2206      	movs	r2, #6
 8004a14:	f7fb fbdc 	bl	80001d0 <memchr>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d038      	beq.n	8004a8e <_svfiprintf_r+0x1d6>
 8004a1c:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <_svfiprintf_r+0x1f0>)
 8004a1e:	bb1b      	cbnz	r3, 8004a68 <_svfiprintf_r+0x1b0>
 8004a20:	9b03      	ldr	r3, [sp, #12]
 8004a22:	3307      	adds	r3, #7
 8004a24:	f023 0307 	bic.w	r3, r3, #7
 8004a28:	3308      	adds	r3, #8
 8004a2a:	9303      	str	r3, [sp, #12]
 8004a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a2e:	4433      	add	r3, r6
 8004a30:	9309      	str	r3, [sp, #36]	; 0x24
 8004a32:	e768      	b.n	8004906 <_svfiprintf_r+0x4e>
 8004a34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a38:	460c      	mov	r4, r1
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e7a6      	b.n	800498c <_svfiprintf_r+0xd4>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	3401      	adds	r4, #1
 8004a42:	9305      	str	r3, [sp, #20]
 8004a44:	4619      	mov	r1, r3
 8004a46:	f04f 0c0a 	mov.w	ip, #10
 8004a4a:	4620      	mov	r0, r4
 8004a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a50:	3a30      	subs	r2, #48	; 0x30
 8004a52:	2a09      	cmp	r2, #9
 8004a54:	d903      	bls.n	8004a5e <_svfiprintf_r+0x1a6>
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0c6      	beq.n	80049e8 <_svfiprintf_r+0x130>
 8004a5a:	9105      	str	r1, [sp, #20]
 8004a5c:	e7c4      	b.n	80049e8 <_svfiprintf_r+0x130>
 8004a5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a62:	4604      	mov	r4, r0
 8004a64:	2301      	movs	r3, #1
 8004a66:	e7f0      	b.n	8004a4a <_svfiprintf_r+0x192>
 8004a68:	ab03      	add	r3, sp, #12
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	462a      	mov	r2, r5
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <_svfiprintf_r+0x1f4>)
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	4638      	mov	r0, r7
 8004a74:	f3af 8000 	nop.w
 8004a78:	1c42      	adds	r2, r0, #1
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	d1d6      	bne.n	8004a2c <_svfiprintf_r+0x174>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	065b      	lsls	r3, r3, #25
 8004a82:	f53f af2d 	bmi.w	80048e0 <_svfiprintf_r+0x28>
 8004a86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a88:	b01d      	add	sp, #116	; 0x74
 8004a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8e:	ab03      	add	r3, sp, #12
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	462a      	mov	r2, r5
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <_svfiprintf_r+0x1f4>)
 8004a96:	a904      	add	r1, sp, #16
 8004a98:	4638      	mov	r0, r7
 8004a9a:	f000 f879 	bl	8004b90 <_printf_i>
 8004a9e:	e7eb      	b.n	8004a78 <_svfiprintf_r+0x1c0>
 8004aa0:	0800527c 	.word	0x0800527c
 8004aa4:	08005286 	.word	0x08005286
 8004aa8:	00000000 	.word	0x00000000
 8004aac:	08004805 	.word	0x08004805
 8004ab0:	08005282 	.word	0x08005282

08004ab4 <_printf_common>:
 8004ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab8:	4616      	mov	r6, r2
 8004aba:	4699      	mov	r9, r3
 8004abc:	688a      	ldr	r2, [r1, #8]
 8004abe:	690b      	ldr	r3, [r1, #16]
 8004ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	bfb8      	it	lt
 8004ac8:	4613      	movlt	r3, r2
 8004aca:	6033      	str	r3, [r6, #0]
 8004acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	460c      	mov	r4, r1
 8004ad4:	b10a      	cbz	r2, 8004ada <_printf_common+0x26>
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	6033      	str	r3, [r6, #0]
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	0699      	lsls	r1, r3, #26
 8004ade:	bf42      	ittt	mi
 8004ae0:	6833      	ldrmi	r3, [r6, #0]
 8004ae2:	3302      	addmi	r3, #2
 8004ae4:	6033      	strmi	r3, [r6, #0]
 8004ae6:	6825      	ldr	r5, [r4, #0]
 8004ae8:	f015 0506 	ands.w	r5, r5, #6
 8004aec:	d106      	bne.n	8004afc <_printf_common+0x48>
 8004aee:	f104 0a19 	add.w	sl, r4, #25
 8004af2:	68e3      	ldr	r3, [r4, #12]
 8004af4:	6832      	ldr	r2, [r6, #0]
 8004af6:	1a9b      	subs	r3, r3, r2
 8004af8:	42ab      	cmp	r3, r5
 8004afa:	dc26      	bgt.n	8004b4a <_printf_common+0x96>
 8004afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b00:	1e13      	subs	r3, r2, #0
 8004b02:	6822      	ldr	r2, [r4, #0]
 8004b04:	bf18      	it	ne
 8004b06:	2301      	movne	r3, #1
 8004b08:	0692      	lsls	r2, r2, #26
 8004b0a:	d42b      	bmi.n	8004b64 <_printf_common+0xb0>
 8004b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b10:	4649      	mov	r1, r9
 8004b12:	4638      	mov	r0, r7
 8004b14:	47c0      	blx	r8
 8004b16:	3001      	adds	r0, #1
 8004b18:	d01e      	beq.n	8004b58 <_printf_common+0xa4>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	6922      	ldr	r2, [r4, #16]
 8004b1e:	f003 0306 	and.w	r3, r3, #6
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	bf02      	ittt	eq
 8004b26:	68e5      	ldreq	r5, [r4, #12]
 8004b28:	6833      	ldreq	r3, [r6, #0]
 8004b2a:	1aed      	subeq	r5, r5, r3
 8004b2c:	68a3      	ldr	r3, [r4, #8]
 8004b2e:	bf0c      	ite	eq
 8004b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b34:	2500      	movne	r5, #0
 8004b36:	4293      	cmp	r3, r2
 8004b38:	bfc4      	itt	gt
 8004b3a:	1a9b      	subgt	r3, r3, r2
 8004b3c:	18ed      	addgt	r5, r5, r3
 8004b3e:	2600      	movs	r6, #0
 8004b40:	341a      	adds	r4, #26
 8004b42:	42b5      	cmp	r5, r6
 8004b44:	d11a      	bne.n	8004b7c <_printf_common+0xc8>
 8004b46:	2000      	movs	r0, #0
 8004b48:	e008      	b.n	8004b5c <_printf_common+0xa8>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	4652      	mov	r2, sl
 8004b4e:	4649      	mov	r1, r9
 8004b50:	4638      	mov	r0, r7
 8004b52:	47c0      	blx	r8
 8004b54:	3001      	adds	r0, #1
 8004b56:	d103      	bne.n	8004b60 <_printf_common+0xac>
 8004b58:	f04f 30ff 	mov.w	r0, #4294967295
 8004b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b60:	3501      	adds	r5, #1
 8004b62:	e7c6      	b.n	8004af2 <_printf_common+0x3e>
 8004b64:	18e1      	adds	r1, r4, r3
 8004b66:	1c5a      	adds	r2, r3, #1
 8004b68:	2030      	movs	r0, #48	; 0x30
 8004b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b6e:	4422      	add	r2, r4
 8004b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b78:	3302      	adds	r3, #2
 8004b7a:	e7c7      	b.n	8004b0c <_printf_common+0x58>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4622      	mov	r2, r4
 8004b80:	4649      	mov	r1, r9
 8004b82:	4638      	mov	r0, r7
 8004b84:	47c0      	blx	r8
 8004b86:	3001      	adds	r0, #1
 8004b88:	d0e6      	beq.n	8004b58 <_printf_common+0xa4>
 8004b8a:	3601      	adds	r6, #1
 8004b8c:	e7d9      	b.n	8004b42 <_printf_common+0x8e>
	...

08004b90 <_printf_i>:
 8004b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	7e0f      	ldrb	r7, [r1, #24]
 8004b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b98:	2f78      	cmp	r7, #120	; 0x78
 8004b9a:	4691      	mov	r9, r2
 8004b9c:	4680      	mov	r8, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	469a      	mov	sl, r3
 8004ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004ba6:	d807      	bhi.n	8004bb8 <_printf_i+0x28>
 8004ba8:	2f62      	cmp	r7, #98	; 0x62
 8004baa:	d80a      	bhi.n	8004bc2 <_printf_i+0x32>
 8004bac:	2f00      	cmp	r7, #0
 8004bae:	f000 80d4 	beq.w	8004d5a <_printf_i+0x1ca>
 8004bb2:	2f58      	cmp	r7, #88	; 0x58
 8004bb4:	f000 80c0 	beq.w	8004d38 <_printf_i+0x1a8>
 8004bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bc0:	e03a      	b.n	8004c38 <_printf_i+0xa8>
 8004bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bc6:	2b15      	cmp	r3, #21
 8004bc8:	d8f6      	bhi.n	8004bb8 <_printf_i+0x28>
 8004bca:	a101      	add	r1, pc, #4	; (adr r1, 8004bd0 <_printf_i+0x40>)
 8004bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c3d 	.word	0x08004c3d
 8004bd8:	08004bb9 	.word	0x08004bb9
 8004bdc:	08004bb9 	.word	0x08004bb9
 8004be0:	08004bb9 	.word	0x08004bb9
 8004be4:	08004bb9 	.word	0x08004bb9
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004bb9 	.word	0x08004bb9
 8004bf0:	08004bb9 	.word	0x08004bb9
 8004bf4:	08004bb9 	.word	0x08004bb9
 8004bf8:	08004bb9 	.word	0x08004bb9
 8004bfc:	08004d41 	.word	0x08004d41
 8004c00:	08004c69 	.word	0x08004c69
 8004c04:	08004cfb 	.word	0x08004cfb
 8004c08:	08004bb9 	.word	0x08004bb9
 8004c0c:	08004bb9 	.word	0x08004bb9
 8004c10:	08004d63 	.word	0x08004d63
 8004c14:	08004bb9 	.word	0x08004bb9
 8004c18:	08004c69 	.word	0x08004c69
 8004c1c:	08004bb9 	.word	0x08004bb9
 8004c20:	08004bb9 	.word	0x08004bb9
 8004c24:	08004d03 	.word	0x08004d03
 8004c28:	682b      	ldr	r3, [r5, #0]
 8004c2a:	1d1a      	adds	r2, r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	602a      	str	r2, [r5, #0]
 8004c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e09f      	b.n	8004d7c <_printf_i+0x1ec>
 8004c3c:	6820      	ldr	r0, [r4, #0]
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	0607      	lsls	r7, r0, #24
 8004c42:	f103 0104 	add.w	r1, r3, #4
 8004c46:	6029      	str	r1, [r5, #0]
 8004c48:	d501      	bpl.n	8004c4e <_printf_i+0xbe>
 8004c4a:	681e      	ldr	r6, [r3, #0]
 8004c4c:	e003      	b.n	8004c56 <_printf_i+0xc6>
 8004c4e:	0646      	lsls	r6, r0, #25
 8004c50:	d5fb      	bpl.n	8004c4a <_printf_i+0xba>
 8004c52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	da03      	bge.n	8004c62 <_printf_i+0xd2>
 8004c5a:	232d      	movs	r3, #45	; 0x2d
 8004c5c:	4276      	negs	r6, r6
 8004c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c62:	485a      	ldr	r0, [pc, #360]	; (8004dcc <_printf_i+0x23c>)
 8004c64:	230a      	movs	r3, #10
 8004c66:	e012      	b.n	8004c8e <_printf_i+0xfe>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	6029      	str	r1, [r5, #0]
 8004c70:	0605      	lsls	r5, r0, #24
 8004c72:	d501      	bpl.n	8004c78 <_printf_i+0xe8>
 8004c74:	681e      	ldr	r6, [r3, #0]
 8004c76:	e002      	b.n	8004c7e <_printf_i+0xee>
 8004c78:	0641      	lsls	r1, r0, #25
 8004c7a:	d5fb      	bpl.n	8004c74 <_printf_i+0xe4>
 8004c7c:	881e      	ldrh	r6, [r3, #0]
 8004c7e:	4853      	ldr	r0, [pc, #332]	; (8004dcc <_printf_i+0x23c>)
 8004c80:	2f6f      	cmp	r7, #111	; 0x6f
 8004c82:	bf0c      	ite	eq
 8004c84:	2308      	moveq	r3, #8
 8004c86:	230a      	movne	r3, #10
 8004c88:	2100      	movs	r1, #0
 8004c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c8e:	6865      	ldr	r5, [r4, #4]
 8004c90:	60a5      	str	r5, [r4, #8]
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	bfa2      	ittt	ge
 8004c96:	6821      	ldrge	r1, [r4, #0]
 8004c98:	f021 0104 	bicge.w	r1, r1, #4
 8004c9c:	6021      	strge	r1, [r4, #0]
 8004c9e:	b90e      	cbnz	r6, 8004ca4 <_printf_i+0x114>
 8004ca0:	2d00      	cmp	r5, #0
 8004ca2:	d04b      	beq.n	8004d3c <_printf_i+0x1ac>
 8004ca4:	4615      	mov	r5, r2
 8004ca6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004caa:	fb03 6711 	mls	r7, r3, r1, r6
 8004cae:	5dc7      	ldrb	r7, [r0, r7]
 8004cb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cb4:	4637      	mov	r7, r6
 8004cb6:	42bb      	cmp	r3, r7
 8004cb8:	460e      	mov	r6, r1
 8004cba:	d9f4      	bls.n	8004ca6 <_printf_i+0x116>
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d10b      	bne.n	8004cd8 <_printf_i+0x148>
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	07de      	lsls	r6, r3, #31
 8004cc4:	d508      	bpl.n	8004cd8 <_printf_i+0x148>
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	6861      	ldr	r1, [r4, #4]
 8004cca:	4299      	cmp	r1, r3
 8004ccc:	bfde      	ittt	le
 8004cce:	2330      	movle	r3, #48	; 0x30
 8004cd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cd8:	1b52      	subs	r2, r2, r5
 8004cda:	6122      	str	r2, [r4, #16]
 8004cdc:	f8cd a000 	str.w	sl, [sp]
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	aa03      	add	r2, sp, #12
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	f7ff fee4 	bl	8004ab4 <_printf_common>
 8004cec:	3001      	adds	r0, #1
 8004cee:	d14a      	bne.n	8004d86 <_printf_i+0x1f6>
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	b004      	add	sp, #16
 8004cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f043 0320 	orr.w	r3, r3, #32
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	4833      	ldr	r0, [pc, #204]	; (8004dd0 <_printf_i+0x240>)
 8004d04:	2778      	movs	r7, #120	; 0x78
 8004d06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	6829      	ldr	r1, [r5, #0]
 8004d0e:	061f      	lsls	r7, r3, #24
 8004d10:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d14:	d402      	bmi.n	8004d1c <_printf_i+0x18c>
 8004d16:	065f      	lsls	r7, r3, #25
 8004d18:	bf48      	it	mi
 8004d1a:	b2b6      	uxthmi	r6, r6
 8004d1c:	07df      	lsls	r7, r3, #31
 8004d1e:	bf48      	it	mi
 8004d20:	f043 0320 	orrmi.w	r3, r3, #32
 8004d24:	6029      	str	r1, [r5, #0]
 8004d26:	bf48      	it	mi
 8004d28:	6023      	strmi	r3, [r4, #0]
 8004d2a:	b91e      	cbnz	r6, 8004d34 <_printf_i+0x1a4>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	f023 0320 	bic.w	r3, r3, #32
 8004d32:	6023      	str	r3, [r4, #0]
 8004d34:	2310      	movs	r3, #16
 8004d36:	e7a7      	b.n	8004c88 <_printf_i+0xf8>
 8004d38:	4824      	ldr	r0, [pc, #144]	; (8004dcc <_printf_i+0x23c>)
 8004d3a:	e7e4      	b.n	8004d06 <_printf_i+0x176>
 8004d3c:	4615      	mov	r5, r2
 8004d3e:	e7bd      	b.n	8004cbc <_printf_i+0x12c>
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	6826      	ldr	r6, [r4, #0]
 8004d44:	6961      	ldr	r1, [r4, #20]
 8004d46:	1d18      	adds	r0, r3, #4
 8004d48:	6028      	str	r0, [r5, #0]
 8004d4a:	0635      	lsls	r5, r6, #24
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	d501      	bpl.n	8004d54 <_printf_i+0x1c4>
 8004d50:	6019      	str	r1, [r3, #0]
 8004d52:	e002      	b.n	8004d5a <_printf_i+0x1ca>
 8004d54:	0670      	lsls	r0, r6, #25
 8004d56:	d5fb      	bpl.n	8004d50 <_printf_i+0x1c0>
 8004d58:	8019      	strh	r1, [r3, #0]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6123      	str	r3, [r4, #16]
 8004d5e:	4615      	mov	r5, r2
 8004d60:	e7bc      	b.n	8004cdc <_printf_i+0x14c>
 8004d62:	682b      	ldr	r3, [r5, #0]
 8004d64:	1d1a      	adds	r2, r3, #4
 8004d66:	602a      	str	r2, [r5, #0]
 8004d68:	681d      	ldr	r5, [r3, #0]
 8004d6a:	6862      	ldr	r2, [r4, #4]
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f7fb fa2e 	bl	80001d0 <memchr>
 8004d74:	b108      	cbz	r0, 8004d7a <_printf_i+0x1ea>
 8004d76:	1b40      	subs	r0, r0, r5
 8004d78:	6060      	str	r0, [r4, #4]
 8004d7a:	6863      	ldr	r3, [r4, #4]
 8004d7c:	6123      	str	r3, [r4, #16]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d84:	e7aa      	b.n	8004cdc <_printf_i+0x14c>
 8004d86:	6923      	ldr	r3, [r4, #16]
 8004d88:	462a      	mov	r2, r5
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4640      	mov	r0, r8
 8004d8e:	47d0      	blx	sl
 8004d90:	3001      	adds	r0, #1
 8004d92:	d0ad      	beq.n	8004cf0 <_printf_i+0x160>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	079b      	lsls	r3, r3, #30
 8004d98:	d413      	bmi.n	8004dc2 <_printf_i+0x232>
 8004d9a:	68e0      	ldr	r0, [r4, #12]
 8004d9c:	9b03      	ldr	r3, [sp, #12]
 8004d9e:	4298      	cmp	r0, r3
 8004da0:	bfb8      	it	lt
 8004da2:	4618      	movlt	r0, r3
 8004da4:	e7a6      	b.n	8004cf4 <_printf_i+0x164>
 8004da6:	2301      	movs	r3, #1
 8004da8:	4632      	mov	r2, r6
 8004daa:	4649      	mov	r1, r9
 8004dac:	4640      	mov	r0, r8
 8004dae:	47d0      	blx	sl
 8004db0:	3001      	adds	r0, #1
 8004db2:	d09d      	beq.n	8004cf0 <_printf_i+0x160>
 8004db4:	3501      	adds	r5, #1
 8004db6:	68e3      	ldr	r3, [r4, #12]
 8004db8:	9903      	ldr	r1, [sp, #12]
 8004dba:	1a5b      	subs	r3, r3, r1
 8004dbc:	42ab      	cmp	r3, r5
 8004dbe:	dcf2      	bgt.n	8004da6 <_printf_i+0x216>
 8004dc0:	e7eb      	b.n	8004d9a <_printf_i+0x20a>
 8004dc2:	2500      	movs	r5, #0
 8004dc4:	f104 0619 	add.w	r6, r4, #25
 8004dc8:	e7f5      	b.n	8004db6 <_printf_i+0x226>
 8004dca:	bf00      	nop
 8004dcc:	0800528d 	.word	0x0800528d
 8004dd0:	0800529e 	.word	0x0800529e

08004dd4 <__sflush_r>:
 8004dd4:	898a      	ldrh	r2, [r1, #12]
 8004dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dda:	4605      	mov	r5, r0
 8004ddc:	0710      	lsls	r0, r2, #28
 8004dde:	460c      	mov	r4, r1
 8004de0:	d458      	bmi.n	8004e94 <__sflush_r+0xc0>
 8004de2:	684b      	ldr	r3, [r1, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dc05      	bgt.n	8004df4 <__sflush_r+0x20>
 8004de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	dc02      	bgt.n	8004df4 <__sflush_r+0x20>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d0f9      	beq.n	8004dee <__sflush_r+0x1a>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e00:	682f      	ldr	r7, [r5, #0]
 8004e02:	6a21      	ldr	r1, [r4, #32]
 8004e04:	602b      	str	r3, [r5, #0]
 8004e06:	d032      	beq.n	8004e6e <__sflush_r+0x9a>
 8004e08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	075a      	lsls	r2, r3, #29
 8004e0e:	d505      	bpl.n	8004e1c <__sflush_r+0x48>
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	1ac0      	subs	r0, r0, r3
 8004e14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e16:	b10b      	cbz	r3, 8004e1c <__sflush_r+0x48>
 8004e18:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e1a:	1ac0      	subs	r0, r0, r3
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e22:	6a21      	ldr	r1, [r4, #32]
 8004e24:	4628      	mov	r0, r5
 8004e26:	47b0      	blx	r6
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	d106      	bne.n	8004e3c <__sflush_r+0x68>
 8004e2e:	6829      	ldr	r1, [r5, #0]
 8004e30:	291d      	cmp	r1, #29
 8004e32:	d82b      	bhi.n	8004e8c <__sflush_r+0xb8>
 8004e34:	4a29      	ldr	r2, [pc, #164]	; (8004edc <__sflush_r+0x108>)
 8004e36:	410a      	asrs	r2, r1
 8004e38:	07d6      	lsls	r6, r2, #31
 8004e3a:	d427      	bmi.n	8004e8c <__sflush_r+0xb8>
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	6062      	str	r2, [r4, #4]
 8004e40:	04d9      	lsls	r1, r3, #19
 8004e42:	6922      	ldr	r2, [r4, #16]
 8004e44:	6022      	str	r2, [r4, #0]
 8004e46:	d504      	bpl.n	8004e52 <__sflush_r+0x7e>
 8004e48:	1c42      	adds	r2, r0, #1
 8004e4a:	d101      	bne.n	8004e50 <__sflush_r+0x7c>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	b903      	cbnz	r3, 8004e52 <__sflush_r+0x7e>
 8004e50:	6560      	str	r0, [r4, #84]	; 0x54
 8004e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e54:	602f      	str	r7, [r5, #0]
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d0c9      	beq.n	8004dee <__sflush_r+0x1a>
 8004e5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e5e:	4299      	cmp	r1, r3
 8004e60:	d002      	beq.n	8004e68 <__sflush_r+0x94>
 8004e62:	4628      	mov	r0, r5
 8004e64:	f7ff fbd6 	bl	8004614 <_free_r>
 8004e68:	2000      	movs	r0, #0
 8004e6a:	6360      	str	r0, [r4, #52]	; 0x34
 8004e6c:	e7c0      	b.n	8004df0 <__sflush_r+0x1c>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b0      	blx	r6
 8004e74:	1c41      	adds	r1, r0, #1
 8004e76:	d1c8      	bne.n	8004e0a <__sflush_r+0x36>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0c5      	beq.n	8004e0a <__sflush_r+0x36>
 8004e7e:	2b1d      	cmp	r3, #29
 8004e80:	d001      	beq.n	8004e86 <__sflush_r+0xb2>
 8004e82:	2b16      	cmp	r3, #22
 8004e84:	d101      	bne.n	8004e8a <__sflush_r+0xb6>
 8004e86:	602f      	str	r7, [r5, #0]
 8004e88:	e7b1      	b.n	8004dee <__sflush_r+0x1a>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	e7ad      	b.n	8004df0 <__sflush_r+0x1c>
 8004e94:	690f      	ldr	r7, [r1, #16]
 8004e96:	2f00      	cmp	r7, #0
 8004e98:	d0a9      	beq.n	8004dee <__sflush_r+0x1a>
 8004e9a:	0793      	lsls	r3, r2, #30
 8004e9c:	680e      	ldr	r6, [r1, #0]
 8004e9e:	bf08      	it	eq
 8004ea0:	694b      	ldreq	r3, [r1, #20]
 8004ea2:	600f      	str	r7, [r1, #0]
 8004ea4:	bf18      	it	ne
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	eba6 0807 	sub.w	r8, r6, r7
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	f1b8 0f00 	cmp.w	r8, #0
 8004eb2:	dd9c      	ble.n	8004dee <__sflush_r+0x1a>
 8004eb4:	6a21      	ldr	r1, [r4, #32]
 8004eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004eb8:	4643      	mov	r3, r8
 8004eba:	463a      	mov	r2, r7
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b0      	blx	r6
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	dc06      	bgt.n	8004ed2 <__sflush_r+0xfe>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eca:	81a3      	strh	r3, [r4, #12]
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	e78e      	b.n	8004df0 <__sflush_r+0x1c>
 8004ed2:	4407      	add	r7, r0
 8004ed4:	eba8 0800 	sub.w	r8, r8, r0
 8004ed8:	e7e9      	b.n	8004eae <__sflush_r+0xda>
 8004eda:	bf00      	nop
 8004edc:	dfbffffe 	.word	0xdfbffffe

08004ee0 <_fflush_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	690b      	ldr	r3, [r1, #16]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	b913      	cbnz	r3, 8004ef0 <_fflush_r+0x10>
 8004eea:	2500      	movs	r5, #0
 8004eec:	4628      	mov	r0, r5
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	b118      	cbz	r0, 8004efa <_fflush_r+0x1a>
 8004ef2:	6a03      	ldr	r3, [r0, #32]
 8004ef4:	b90b      	cbnz	r3, 8004efa <_fflush_r+0x1a>
 8004ef6:	f7ff f987 	bl	8004208 <__sinit>
 8004efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f3      	beq.n	8004eea <_fflush_r+0xa>
 8004f02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f04:	07d0      	lsls	r0, r2, #31
 8004f06:	d404      	bmi.n	8004f12 <_fflush_r+0x32>
 8004f08:	0599      	lsls	r1, r3, #22
 8004f0a:	d402      	bmi.n	8004f12 <_fflush_r+0x32>
 8004f0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f0e:	f7ff fb7e 	bl	800460e <__retarget_lock_acquire_recursive>
 8004f12:	4628      	mov	r0, r5
 8004f14:	4621      	mov	r1, r4
 8004f16:	f7ff ff5d 	bl	8004dd4 <__sflush_r>
 8004f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f1c:	07da      	lsls	r2, r3, #31
 8004f1e:	4605      	mov	r5, r0
 8004f20:	d4e4      	bmi.n	8004eec <_fflush_r+0xc>
 8004f22:	89a3      	ldrh	r3, [r4, #12]
 8004f24:	059b      	lsls	r3, r3, #22
 8004f26:	d4e1      	bmi.n	8004eec <_fflush_r+0xc>
 8004f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f2a:	f7ff fb71 	bl	8004610 <__retarget_lock_release_recursive>
 8004f2e:	e7dd      	b.n	8004eec <_fflush_r+0xc>

08004f30 <__swhatbuf_r>:
 8004f30:	b570      	push	{r4, r5, r6, lr}
 8004f32:	460c      	mov	r4, r1
 8004f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	b096      	sub	sp, #88	; 0x58
 8004f3c:	4615      	mov	r5, r2
 8004f3e:	461e      	mov	r6, r3
 8004f40:	da0d      	bge.n	8004f5e <__swhatbuf_r+0x2e>
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	bf0c      	ite	eq
 8004f4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004f52:	2340      	movne	r3, #64	; 0x40
 8004f54:	2000      	movs	r0, #0
 8004f56:	6031      	str	r1, [r6, #0]
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	b016      	add	sp, #88	; 0x58
 8004f5c:	bd70      	pop	{r4, r5, r6, pc}
 8004f5e:	466a      	mov	r2, sp
 8004f60:	f000 f862 	bl	8005028 <_fstat_r>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	dbec      	blt.n	8004f42 <__swhatbuf_r+0x12>
 8004f68:	9901      	ldr	r1, [sp, #4]
 8004f6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004f6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004f72:	4259      	negs	r1, r3
 8004f74:	4159      	adcs	r1, r3
 8004f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7a:	e7eb      	b.n	8004f54 <__swhatbuf_r+0x24>

08004f7c <__smakebuf_r>:
 8004f7c:	898b      	ldrh	r3, [r1, #12]
 8004f7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f80:	079d      	lsls	r5, r3, #30
 8004f82:	4606      	mov	r6, r0
 8004f84:	460c      	mov	r4, r1
 8004f86:	d507      	bpl.n	8004f98 <__smakebuf_r+0x1c>
 8004f88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	6123      	str	r3, [r4, #16]
 8004f90:	2301      	movs	r3, #1
 8004f92:	6163      	str	r3, [r4, #20]
 8004f94:	b002      	add	sp, #8
 8004f96:	bd70      	pop	{r4, r5, r6, pc}
 8004f98:	ab01      	add	r3, sp, #4
 8004f9a:	466a      	mov	r2, sp
 8004f9c:	f7ff ffc8 	bl	8004f30 <__swhatbuf_r>
 8004fa0:	9900      	ldr	r1, [sp, #0]
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f7ff fba1 	bl	80046ec <_malloc_r>
 8004faa:	b948      	cbnz	r0, 8004fc0 <__smakebuf_r+0x44>
 8004fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb0:	059a      	lsls	r2, r3, #22
 8004fb2:	d4ef      	bmi.n	8004f94 <__smakebuf_r+0x18>
 8004fb4:	f023 0303 	bic.w	r3, r3, #3
 8004fb8:	f043 0302 	orr.w	r3, r3, #2
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	e7e3      	b.n	8004f88 <__smakebuf_r+0xc>
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	6020      	str	r0, [r4, #0]
 8004fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc8:	81a3      	strh	r3, [r4, #12]
 8004fca:	9b00      	ldr	r3, [sp, #0]
 8004fcc:	6163      	str	r3, [r4, #20]
 8004fce:	9b01      	ldr	r3, [sp, #4]
 8004fd0:	6120      	str	r0, [r4, #16]
 8004fd2:	b15b      	cbz	r3, 8004fec <__smakebuf_r+0x70>
 8004fd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f000 f837 	bl	800504c <_isatty_r>
 8004fde:	b128      	cbz	r0, 8004fec <__smakebuf_r+0x70>
 8004fe0:	89a3      	ldrh	r3, [r4, #12]
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	f043 0301 	orr.w	r3, r3, #1
 8004fea:	81a3      	strh	r3, [r4, #12]
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	431d      	orrs	r5, r3
 8004ff0:	81a5      	strh	r5, [r4, #12]
 8004ff2:	e7cf      	b.n	8004f94 <__smakebuf_r+0x18>

08004ff4 <memmove>:
 8004ff4:	4288      	cmp	r0, r1
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	eb01 0402 	add.w	r4, r1, r2
 8004ffc:	d902      	bls.n	8005004 <memmove+0x10>
 8004ffe:	4284      	cmp	r4, r0
 8005000:	4623      	mov	r3, r4
 8005002:	d807      	bhi.n	8005014 <memmove+0x20>
 8005004:	1e43      	subs	r3, r0, #1
 8005006:	42a1      	cmp	r1, r4
 8005008:	d008      	beq.n	800501c <memmove+0x28>
 800500a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800500e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005012:	e7f8      	b.n	8005006 <memmove+0x12>
 8005014:	4402      	add	r2, r0
 8005016:	4601      	mov	r1, r0
 8005018:	428a      	cmp	r2, r1
 800501a:	d100      	bne.n	800501e <memmove+0x2a>
 800501c:	bd10      	pop	{r4, pc}
 800501e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005026:	e7f7      	b.n	8005018 <memmove+0x24>

08005028 <_fstat_r>:
 8005028:	b538      	push	{r3, r4, r5, lr}
 800502a:	4d07      	ldr	r5, [pc, #28]	; (8005048 <_fstat_r+0x20>)
 800502c:	2300      	movs	r3, #0
 800502e:	4604      	mov	r4, r0
 8005030:	4608      	mov	r0, r1
 8005032:	4611      	mov	r1, r2
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	f7fc fcf8 	bl	8001a2a <_fstat>
 800503a:	1c43      	adds	r3, r0, #1
 800503c:	d102      	bne.n	8005044 <_fstat_r+0x1c>
 800503e:	682b      	ldr	r3, [r5, #0]
 8005040:	b103      	cbz	r3, 8005044 <_fstat_r+0x1c>
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	bd38      	pop	{r3, r4, r5, pc}
 8005046:	bf00      	nop
 8005048:	20000310 	.word	0x20000310

0800504c <_isatty_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4d06      	ldr	r5, [pc, #24]	; (8005068 <_isatty_r+0x1c>)
 8005050:	2300      	movs	r3, #0
 8005052:	4604      	mov	r4, r0
 8005054:	4608      	mov	r0, r1
 8005056:	602b      	str	r3, [r5, #0]
 8005058:	f7fc fcf7 	bl	8001a4a <_isatty>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_isatty_r+0x1a>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_isatty_r+0x1a>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000310 	.word	0x20000310

0800506c <_sbrk_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	4d06      	ldr	r5, [pc, #24]	; (8005088 <_sbrk_r+0x1c>)
 8005070:	2300      	movs	r3, #0
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	f7fc fd00 	bl	8001a7c <_sbrk>
 800507c:	1c43      	adds	r3, r0, #1
 800507e:	d102      	bne.n	8005086 <_sbrk_r+0x1a>
 8005080:	682b      	ldr	r3, [r5, #0]
 8005082:	b103      	cbz	r3, 8005086 <_sbrk_r+0x1a>
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	bd38      	pop	{r3, r4, r5, pc}
 8005088:	20000310 	.word	0x20000310

0800508c <memcpy>:
 800508c:	440a      	add	r2, r1
 800508e:	4291      	cmp	r1, r2
 8005090:	f100 33ff 	add.w	r3, r0, #4294967295
 8005094:	d100      	bne.n	8005098 <memcpy+0xc>
 8005096:	4770      	bx	lr
 8005098:	b510      	push	{r4, lr}
 800509a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a2:	4291      	cmp	r1, r2
 80050a4:	d1f9      	bne.n	800509a <memcpy+0xe>
 80050a6:	bd10      	pop	{r4, pc}

080050a8 <_realloc_r>:
 80050a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ac:	4680      	mov	r8, r0
 80050ae:	4614      	mov	r4, r2
 80050b0:	460e      	mov	r6, r1
 80050b2:	b921      	cbnz	r1, 80050be <_realloc_r+0x16>
 80050b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b8:	4611      	mov	r1, r2
 80050ba:	f7ff bb17 	b.w	80046ec <_malloc_r>
 80050be:	b92a      	cbnz	r2, 80050cc <_realloc_r+0x24>
 80050c0:	f7ff faa8 	bl	8004614 <_free_r>
 80050c4:	4625      	mov	r5, r4
 80050c6:	4628      	mov	r0, r5
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	f000 f81b 	bl	8005106 <_malloc_usable_size_r>
 80050d0:	4284      	cmp	r4, r0
 80050d2:	4607      	mov	r7, r0
 80050d4:	d802      	bhi.n	80050dc <_realloc_r+0x34>
 80050d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80050da:	d812      	bhi.n	8005102 <_realloc_r+0x5a>
 80050dc:	4621      	mov	r1, r4
 80050de:	4640      	mov	r0, r8
 80050e0:	f7ff fb04 	bl	80046ec <_malloc_r>
 80050e4:	4605      	mov	r5, r0
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d0ed      	beq.n	80050c6 <_realloc_r+0x1e>
 80050ea:	42bc      	cmp	r4, r7
 80050ec:	4622      	mov	r2, r4
 80050ee:	4631      	mov	r1, r6
 80050f0:	bf28      	it	cs
 80050f2:	463a      	movcs	r2, r7
 80050f4:	f7ff ffca 	bl	800508c <memcpy>
 80050f8:	4631      	mov	r1, r6
 80050fa:	4640      	mov	r0, r8
 80050fc:	f7ff fa8a 	bl	8004614 <_free_r>
 8005100:	e7e1      	b.n	80050c6 <_realloc_r+0x1e>
 8005102:	4635      	mov	r5, r6
 8005104:	e7df      	b.n	80050c6 <_realloc_r+0x1e>

08005106 <_malloc_usable_size_r>:
 8005106:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800510a:	1f18      	subs	r0, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	bfbc      	itt	lt
 8005110:	580b      	ldrlt	r3, [r1, r0]
 8005112:	18c0      	addlt	r0, r0, r3
 8005114:	4770      	bx	lr
	...

08005118 <_init>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr

08005124 <_fini>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr
